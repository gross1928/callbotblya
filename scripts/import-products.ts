/**
 * Script to parse tablica_caloriynosti.md and import products into database
 * Run with: npx ts-node scripts/import-products.ts
 */

import * as fs from 'fs';
import * as path from 'path';
import { pool } from '../src/database/client';

interface Product {
  name: string;
  category: string;
  protein: number;
  fat: number;
  carbs: number;
  calories: number;
}

const CATEGORY_MARKERS = [
  '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, –º—É–∫–∞, –∫—Ä—É–ø—ã, –±–æ–±–æ–≤—ã–µ',
  '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –ø—Ç–∏—Ü–∞',
  '–ö–æ–ª–±–∞—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, –º—è—Å–Ω—ã–µ –∫–æ–Ω—Å–µ—Ä–≤—ã',
  '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
  '–†—ã–±–∞ —Å–æ–ª–µ–Ω–∞—è, –∫–æ–ø—á–µ–Ω–∞—è, –≤—è–ª–µ–Ω–∞—è, –∏–∫—Ä–∞',
  '–ö–æ–Ω—Å–µ—Ä–≤—ã —Ä—ã–±–Ω—ã–µ',
  '–Ø–π—Ü–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
  '–ú–∞—Å–ª–∞, –∂–∏—Ä—ã –∏ –∂–∏—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  '–û–≤–æ—â–∏, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –∑–µ–ª–µ–Ω—å, –≥—Ä–∏–±—ã, –æ–≤–æ—â–Ω—ã–µ –∫–æ–Ω—Å–µ—Ä–≤—ã',
  '–ì—Ä–∏–±—ã',
  '–û–≤–æ—â–Ω—ã–µ –∫–æ–Ω—Å–µ—Ä–≤—ã',
  '–§—Ä—É–∫—Ç—ã, —è–≥–æ–¥—ã, –±–∞—Ö—á–µ–≤—ã–µ',
  '–û—Ä–µ—Ö–∏, —Å–µ–º–µ–Ω–∞, —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã',
  '–°–∞—Ö–∞—Ä, —Å–ª–∞–¥–∫–æ–µ –∏ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è',
  '–°–æ–∫–∏, –Ω–∞–ø–∏—Ç–∫–∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ',
  '–ù–∞–ø–∏—Ç–∫–∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ'
];

function normalizeProductName(name: string): string {
  return name
    .toLowerCase()
    .trim()
    .replace(/\s+/g, ' ');
}

function parseNutritionValue(value: string): number {
  // Handle ranges like "7,5-7,6" -> take average
  if (value.includes('-')) {
    const [min, max] = value.split('-').map(v => parseFloat(v.replace(',', '.')));
    return (min + max) / 2;
  }
  
  // Handle "—Å–ª–µ–¥—ã" (traces) -> 0
  if (value.toLowerCase().includes('—Å–ª–µ–¥') || value === '-') {
    return 0;
  }
  
  // Normal number
  return parseFloat(value.replace(',', '.')) || 0;
}

function parseProductLine(line: string, category: string): Product | null {
  // Skip empty lines, headers, and category lines
  if (!line.trim() || 
      line.includes('–ü—Ä–æ–¥—É–∫—Ç—ã') || 
      line.includes('–ë–µ–ª–∫–∏,') ||
      line.includes('–ñ–∏—Ä—ã,') ||
      line.includes('–£–≥–ª–µ–≤–æ–¥—ã') ||
      line.includes('–≠–Ω–µ—Ä–≥–∏—è') ||
      CATEGORY_MARKERS.includes(line.trim())) {
    return null;
  }

  // Try to parse the line
  // Format: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã –∫–∞–ª–æ—Ä–∏–∏"
  const parts = line.split(/\s+/);
  
  if (parts.length < 4) {
    return null;
  }

  // Last 4 numbers are: protein, fat, carbs, calories
  const calories = parts[parts.length - 1];
  const carbs = parts[parts.length - 2];
  const fat = parts[parts.length - 3];
  const protein = parts[parts.length - 4];

  // Check if last 4 parts look like numbers
  const numbersRegex = /^[\d,\.\-]+$/;
  if (!numbersRegex.test(protein) || !numbersRegex.test(fat) || 
      !numbersRegex.test(carbs) || !numbersRegex.test(calories)) {
    return null;
  }

  // Everything before is the product name
  const name = parts.slice(0, parts.length - 4).join(' ').trim();
  
  if (!name || name.length < 2) {
    return null;
  }

  return {
    name,
    category,
    protein: parseNutritionValue(protein),
    fat: parseNutritionValue(fat),
    carbs: parseNutritionValue(carbs),
    calories: Math.round(parseNutritionValue(calories))
  };
}

async function importProducts() {
  try {
    console.log('üöÄ Starting product import...');

    // Read the file
    const filePath = path.join(__dirname, '../tablica_caloriynosti.md');
    const content = fs.readFileSync(filePath, 'utf-8');
    const lines = content.split('\n');

    let currentCategory = '–û–±—â–∏–µ';
    const products: Product[] = [];
    let skippedLines = 0;

    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Check if this is a category marker
      if (CATEGORY_MARKERS.includes(trimmedLine)) {
        currentCategory = trimmedLine;
        console.log(`\nüìÅ Category: ${currentCategory}`);
        continue;
      }

      // Try to parse as product
      const product = parseProductLine(trimmedLine, currentCategory);
      if (product) {
        products.push(product);
      } else if (trimmedLine && !trimmedLine.includes('–¢–∞–±–ª–∏—Ü–∞') && !trimmedLine.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')) {
        skippedLines++;
      }
    }

    console.log(`\n‚úÖ Parsed ${products.length} products`);
    console.log(`‚ö†Ô∏è  Skipped ${skippedLines} lines`);

    // Clear existing data
    console.log('\nüóëÔ∏è  Clearing existing products...');
    await pool.query('DELETE FROM products_nutrition');

    // Insert products
    console.log('üíæ Inserting products into database...');
    
    let inserted = 0;
    let failed = 0;

    for (const product of products) {
      try {
        await pool.query(
          `INSERT INTO products_nutrition (name, name_normalized, category, protein, fat, carbs, calories)
           VALUES ($1, $2, $3, $4, $5, $6, $7)`,
          [
            product.name,
            normalizeProductName(product.name),
            product.category,
            product.protein,
            product.fat,
            product.carbs,
            product.calories
          ]
        );
        inserted++;
        
        if (inserted % 100 === 0) {
          console.log(`  Inserted ${inserted}/${products.length}...`);
        }
      } catch (error) {
        console.error(`  ‚ùå Failed to insert "${product.name}":`, error);
        failed++;
      }
    }

    console.log(`\n‚úÖ Import complete!`);
    console.log(`   Inserted: ${inserted}`);
    console.log(`   Failed: ${failed}`);

    // Show some stats
    const stats = await pool.query(`
      SELECT category, COUNT(*) as count 
      FROM products_nutrition 
      GROUP BY category 
      ORDER BY count DESC
    `);
    
    console.log('\nüìä Products by category:');
    stats.rows.forEach(row => {
      console.log(`   ${row.category}: ${row.count}`);
    });

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Import failed:', error);
    process.exit(1);
  }
}

// Run the import
importProducts();

