import { Markup } from 'telegraf';
import type { UserProduct } from '../types';
import {
  getUserProductsPaginated,
  getUserProduct,
  addUserProduct,
  deleteUserProduct,
} from '../database/products-queries';

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export async function showUserProductsMenu(
  userId: number,
  page: number = 0
): Promise<{ text: string; keyboard: any }> {
  try {
    const { products, total, hasMore } = await getUserProductsPaginated(userId, page, 6);

    if (products.length === 0) {
      return {
        text: 'üì¶ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n–î–æ–±–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ö–ë–ñ–£ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!',
        keyboard: {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'add_food' }],
            ],
          },
        },
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥) —Å inline keyboard
    const productButtons = [];
    for (let i = 0; i < products.length; i += 2) {
      const row = [];
      row.push({ text: `üçΩ ${products[i].name}`, callback_data: `product_${products[i].id}` });
      if (i + 1 < products.length) {
        row.push({ text: `üçΩ ${products[i + 1].name}`, callback_data: `product_${products[i + 1].id}` });
      }
      productButtons.push(row);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navigationRow = [];
    if (page > 0) {
      navigationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `products_page_${page - 1}` });
    }
    if (hasMore) {
      navigationRow.push({ text: '‚û°Ô∏è', callback_data: `products_page_${page + 1}` });
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...productButtons,
          ...(navigationRow.length > 0 ? [navigationRow] : []),
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'add_food' }],
        ],
      },
    };

    const text = `üì¶ –¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã (${total}):\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π!`;

    return { text, keyboard };
  } catch (error) {
    console.error('Error showing user products menu:', error);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export async function showProductDetails(
  userId: number,
  productId: number
): Promise<{ text: string; keyboard: any }> {
  try {
    const product = await getUserProduct(userId, productId);

    if (!product) {
      return {
        text: '‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        keyboard: {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º', callback_data: 'user_products' }],
            ],
          },
        },
      };
    }

    const text = `üçΩ <b>${product.name}</b> (–Ω–∞ 100–≥)\n\n` +
      `üî• –ö–∞–ª–æ—Ä–∏–∏: ${product.calories} –∫–∫–∞–ª\n` +
      `ü•© –ë–µ–ª–∫–∏: ${product.protein}–≥\n` +
      `üßà –ñ–∏—Ä—ã: ${product.fat}–≥\n` +
      `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${product.carbs}–≥\n\n` +
      `–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º <b>${product.name}</b> —Ç—ã —Å—ä–µ–ª?\n` +
      `–í–≤–µ–¥–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '50–≥', callback_data: `product_weight_${productId}_50` },
            { text: '100–≥', callback_data: `product_weight_${productId}_100` },
            { text: '150–≥', callback_data: `product_weight_${productId}_150` },
          ],
          [
            { text: '200–≥', callback_data: `product_weight_${productId}_200` },
            { text: '250–≥', callback_data: `product_weight_${productId}_250` },
            { text: '300–≥', callback_data: `product_weight_${productId}_300` },
          ],
          [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: `delete_product_${productId}` }],
          [{ text: '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º', callback_data: 'user_products' }],
        ],
      },
    };

    return { text, keyboard };
  } catch (error) {
    console.error('Error showing product details:', error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
export async function handleAddProductStart(): Promise<{ text: string; keyboard: any }> {
  const text = 
    '‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n' +
    '1Ô∏è‚É£ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: "–°—ã—Ä –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π" –∏–ª–∏ "–ì—Ä–µ—á–∞ –≤–∞—Ä–µ–Ω–∞—è"\n\n' +
    '–°—Ç–∞—Ä–∞–π—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –±—ã–ª–æ –ø—Ä–æ—â–µ –Ω–∞–π—Ç–∏!';

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_product' }],
      ],
    },
  };

  return { text, keyboard };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 2: –ö–ë–ñ–£
 */
export async function handleAddProductName(productName: string): Promise<{ text: string; keyboard: any }> {
  const text = 
    `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: ${productName}</b>\n\n` +
    '2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ö–ë–ñ–£ –Ω–∞ 100–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
    '<code>–∫–∞–ª–æ—Ä–∏–∏\n–±–µ–ª–∫–∏\n–∂–∏—Ä—ã\n—É–≥–ª–µ–≤–æ–¥—ã</code>\n\n' +
    '–ü—Ä–∏–º–µ—Ä:\n' +
    '<code>220\n13\n5\n21</code>\n\n' +
    '–ö–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!';

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_product' }],
      ],
    },
  };

  return { text, keyboard };
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –ö–ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export function parseKBZHU(text: string): { calories: number; protein: number; fat: number; carbs: number } | null {
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º
  const lines = text.trim().split(/[\n\s]+/).filter(line => line.length > 0);

  if (lines.length !== 4) {
    return null;
  }

  const values = lines.map(line => {
    const num = parseFloat(line.replace(',', '.'));
    return isNaN(num) ? null : num;
  });

  if (values.some(v => v === null || v < 0)) {
    return null;
  }

  return {
    calories: Math.round(values[0]!),
    protein: Math.round(values[1]! * 10) / 10,
    fat: Math.round(values[2]! * 10) / 10,
    carbs: Math.round(values[3]! * 10) / 10,
  };
}

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
export async function handleAddProductComplete(
  userId: number,
  productName: string,
  kbzhu: { calories: number; protein: number; fat: number; carbs: number }
): Promise<{ text: string; keyboard: any; product: UserProduct }> {
  try {
    const product = await addUserProduct({
      user_id: userId,
      name: productName,
      calories: kbzhu.calories,
      protein: kbzhu.protein,
      fat: kbzhu.fat,
      carbs: kbzhu.carbs,
    });

    if (!product) {
      throw new Error('Failed to add product');
    }

    const text = 
      '‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n' +
      `üçΩ <b>${product.name}</b> (–Ω–∞ 100–≥)\n` +
      `üî• ${product.calories} –∫–∫–∞–ª\n` +
      `ü•© –ë: ${product.protein}–≥\n` +
      `üßà –ñ: ${product.fat}–≥\n` +
      `üçû –£: ${product.carbs}–≥\n\n` +
      '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–µ–Ω—é "–ü—Ä–æ–¥—É–∫—Ç—ã"!';

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º', callback_data: 'user_products' }],
        ],
      },
    };

    return { text, keyboard, product };
  } catch (error) {
    console.error('Error completing add product:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
 */
export async function handleDeleteProduct(
  userId: number,
  productId: number
): Promise<{ text: string; keyboard: any }> {
  try {
    const success = await deleteUserProduct(userId, productId);

    if (!success) {
      return {
        text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
        keyboard: {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º', callback_data: 'user_products' }],
            ],
          },
        },
      };
    }

    const text = '‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!';
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º', callback_data: 'user_products' }],
        ],
      },
    };

    return { text, keyboard };
  } catch (error) {
    console.error('Error deleting product:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å FoodAnalysis –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤–µ—Å–∞
 */
export function createFoodAnalysisFromProduct(
  product: UserProduct,
  weightGrams: number
): {
  name: string;
  ingredients: string[];
  weight: number;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
} {
  const multiplier = weightGrams / 100;

  return {
    name: `${product.name} (${weightGrams}–≥)`,
    ingredients: [product.name],
    weight: weightGrams,
    calories: Math.round(product.calories * multiplier),
    protein: Math.round(product.protein * multiplier * 10) / 10,
    fat: Math.round(product.fat * multiplier * 10) / 10,
    carbs: Math.round(product.carbs * multiplier * 10) / 10,
  };
}

