import { Context } from 'telegraf';
import { analyzeFoodFromPhoto, analyzeFoodFromText } from '../utils/openai';
import { addFoodEntry } from '../database/queries';
import { formatCalories, formatMacros } from '../utils/calculations';
import { updateDashboardMessage } from './dashboard';
import type { CustomContext, FoodAnalysis, MealType } from '../types';

/**
 * Handle food photo analysis
 */
export async function handleFoodPhotoAnalysis(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.message || !('photo' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã.');
      return;
    }

    const photo = ctx.message.photo;
    const largestPhoto = photo[photo.length - 1]; // Get highest resolution photo
    
    // Get file info from Telegram
    const fileInfo = await ctx.telegram.getFile(largestPhoto.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${fileInfo.file_path}`;

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...');

    // Analyze food using OpenAI Vision API
    const analysis = await analyzeFoodFromPhoto(fileUrl);
    
    // Show analysis results
    await showFoodAnalysis(ctx, analysis);

  } catch (error) {
    console.error('Error analyzing food photo:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º.');
  }
}

/**
 * Handle food text analysis
 */
export async function handleFoodTextAnalysis(ctx: CustomContext, text: string): Promise<void> {
  try {
    if (!text || text.trim().length < 3) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Å—ä–µ–ª –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–≤—Å—è–Ω–∫–∞ 100–≥ —Å –±–∞–Ω–∞–Ω–æ–º 150–≥")');
      return;
    }

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã...');

    // Analyze food using OpenAI text API
    const analysis = await analyzeFoodFromText(text);
    
    // Show analysis results
    await showFoodAnalysis(ctx, analysis);

  } catch (error) {
    console.error('Error analyzing food text:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.');
  }
}

/**
 * Show food analysis results with action buttons
 */
async function showFoodAnalysis(ctx: CustomContext, analysis: FoodAnalysis): Promise<void> {
  // Generate unique ID for this analysis
  const analysisId = `food_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  // Store analysis in context
  if (ctx.foodAnalyses) {
    ctx.foodAnalyses.set(analysisId, analysis);
  }

  const analysisText = `
üçé <b>–ê–Ω–∞–ª–∏–∑ –µ–¥—ã</b>

<b>–ë–ª—é–¥–æ:</b> ${analysis.name}
<b>–í–µ—Å:</b> ${analysis.weight}–≥
<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> ${analysis.ingredients.join(', ')}

<b>–ö–ë–ñ–£:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${formatCalories(analysis.calories)}
‚Ä¢ ${formatMacros({ protein: analysis.protein, fat: analysis.fat, carbs: analysis.carbs })}
${analysis.fiber ? `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${analysis.fiber}–≥` : ''}
${analysis.sugar ? `‚Ä¢ –°–∞—Ö–∞—Ä: ${analysis.sugar}–≥` : ''}

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏?
  `;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫', callback_data: `save_food_breakfast_${analysisId}` },
          { text: 'üåû –û–±–µ–¥', callback_data: `save_food_lunch_${analysisId}` },
        ],
        [
          { text: 'üåô –£–∂–∏–Ω', callback_data: `save_food_dinner_${analysisId}` },
          { text: 'üç™ –ü–µ—Ä–µ–∫—É—Å', callback_data: `save_food_snack_${analysisId}` },
        ],
        [
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `edit_food_${analysisId}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_food' },
        ],
      ],
    },
  };

  await ctx.replyWithHTML(analysisText, keyboard);
}

/**
 * Save food entry to database by analysis ID
 */
export async function saveFoodEntryById(ctx: CustomContext, mealType: MealType, analysisId: string): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Get analysis from context
    if (!ctx.foodAnalyses || !ctx.foodAnalyses.has(analysisId)) {
      await ctx.reply('‚ùå –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    const analysis = ctx.foodAnalyses.get(analysisId);

    const entry = {
      user_id: ctx.user.id,
      meal_type: mealType,
      food_data: analysis,
      timestamp: new Date().toISOString(),
    };

    await addFoodEntry(entry);

    // Clean up analysis from context
    ctx.foodAnalyses.delete(analysisId);

    // Update dashboard instead of showing success message
    await updateDashboardMessage(ctx);
    
    // Show quick confirmation
    await ctx.answerCbQuery(`‚úÖ ${getMealTypeText(mealType)} –¥–æ–±–∞–≤–ª–µ–Ω!`);

  } catch (error) {
    console.error('Error saving food entry:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Save food entry to database (legacy function)
 */
export async function saveFoodEntry(ctx: CustomContext, mealType: MealType, analysis: FoodAnalysis): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const entry = {
      user_id: ctx.user.id,
      meal_type: mealType,
      food_data: analysis,
      timestamp: new Date().toISOString(),
    };

    await addFoodEntry(entry);

    // Update dashboard instead of showing success message
    await updateDashboardMessage(ctx);
    
    // Show quick confirmation
    await ctx.answerCbQuery(`‚úÖ ${getMealTypeText(mealType)} –¥–æ–±–∞–≤–ª–µ–Ω!`);

  } catch (error) {
    console.error('Error saving food entry:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle food editing
 */
/**
 * Handle food editing by analysis ID
 */
export async function handleFoodEditById(ctx: CustomContext, analysisId: string): Promise<void> {
  try {
    if (!ctx.foodAnalyses || !ctx.foodAnalyses.has(analysisId)) {
      await ctx.reply('‚ùå –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    const analysis = ctx.foodAnalyses.get(analysisId);
    await handleFoodEdit(ctx, analysis);
  } catch (error) {
    console.error('Error editing food:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–¥—ã');
  }
}

export async function handleFoodEdit(ctx: CustomContext, analysis: FoodAnalysis): Promise<void> {
  await ctx.reply(
    '‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã</b>\n\n' +
    '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n' +
    '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.',
    { parse_mode: 'HTML' }
  );
}

/**
 * Get meal type text in Russian
 */
function getMealTypeText(mealType: MealType): string {
  const types = {
    breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
    lunch: '–û–±–µ–¥',
    dinner: '–£–∂–∏–Ω',
    snack: '–ü–µ—Ä–µ–∫—É—Å',
  };
  return types[mealType];
}

/**
 * Show food history for today
 */
export async function showFoodHistory(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    const entries = await getFoodEntriesByDate(ctx.user.id, today);

    if (entries.length === 0) {
      await ctx.reply('üìã –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –µ–¥—É.');
      return;
    }

    let historyText = 'üìã <b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n';
    let totalCalories = 0;
    let totalProtein = 0;
    let totalFat = 0;
    let totalCarbs = 0;

    // Group by meal type
    const meals = {
      breakfast: [] as any[],
      lunch: [] as any[],
      dinner: [] as any[],
      snack: [] as any[],
    };

    entries.forEach(entry => {
      meals[entry.meal_type].push(entry);
      const food = entry.food_data;
      totalCalories += food.calories;
      totalProtein += food.protein;
      totalFat += food.fat;
      totalCarbs += food.carbs;
    });

    // Display each meal type
    Object.entries(meals).forEach(([mealType, mealEntries]) => {
      if (mealEntries.length > 0) {
        historyText += `\n<b>${getMealTypeText(mealType as MealType)}:</b>\n`;
        mealEntries.forEach(entry => {
          const food = entry.food_data;
          historyText += `‚Ä¢ ${food.name} (${food.weight}–≥) - ${formatCalories(food.calories)}\n`;
        });
      }
    });

    historyText += `\n<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n`;
    historyText += `${formatCalories(totalCalories)} | ${formatMacros({ protein: totalProtein, fat: totalFat, carbs: totalCarbs })}`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' }],
          [{ text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
        ],
      },
    };

    await ctx.replyWithHTML(historyText, keyboard);

  } catch (error) {
    console.error('Error showing food history:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–∏—Ç–∞–Ω–∏—è.');
  }
}

// Import the function we need
import { getFoodEntriesByDate } from '../database/queries';
