import { Context } from 'telegraf';
import { analyzeFoodFromPhoto, analyzeFoodFromText } from '../utils/openai';
import { addFoodEntry, saveUserSession, getUserSession, clearUserSession } from '../database/queries';
import { formatCalories, formatMacros } from '../utils/calculations';
import { updateDashboardMessage } from './dashboard';
import type { CustomContext, FoodAnalysis, MealType } from '../types';

/**
 * Handle food photo analysis
 */
export async function handleFoodPhotoAnalysis(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.message || !('photo' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã.');
      return;
    }

    const photo = ctx.message.photo;
    const largestPhoto = photo[photo.length - 1]; // Get highest resolution photo
    
    // Get file info from Telegram
    const fileInfo = await ctx.telegram.getFile(largestPhoto.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${fileInfo.file_path}`;

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...');

    // Analyze food using OpenAI Vision API
    const analysis = await analyzeFoodFromPhoto(fileUrl);
    
    console.log(`[handleFoodPhotoAnalysis] Analysis completed:`, analysis);
    
    // Show analysis results
    await showFoodAnalysis(ctx, analysis);

  } catch (error) {
    console.error('Error analyzing food photo:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º.');
  }
}

/**
 * Handle food text analysis
 */
export async function handleFoodTextAnalysis(ctx: CustomContext, text: string): Promise<void> {
  try {
    if (!text || text.trim().length < 3) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Å—ä–µ–ª –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–≤—Å—è–Ω–∫–∞ 100–≥ —Å –±–∞–Ω–∞–Ω–æ–º 150–≥")');
      return;
    }

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã...');

    // Analyze food using OpenAI text API
    const analysis = await analyzeFoodFromText(text);
    
    console.log(`[handleFoodTextAnalysis] Analysis completed:`, analysis);
    
    // Show analysis results
    await showFoodAnalysis(ctx, analysis);

  } catch (error) {
    console.error('Error analyzing food text:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.');
  }
}

/**
 * Show food analysis results with action buttons
 */
async function showFoodAnalysis(ctx: CustomContext, analysis: FoodAnalysis): Promise<void> {
  try {
    // Generate unique ID for this analysis
    const analysisId = `food_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`[showFoodAnalysis] Starting with analysisId: ${analysisId}`);
    console.log(`[showFoodAnalysis] Analysis data:`, JSON.stringify(analysis));
    console.log(`[showFoodAnalysis] ctx.foodAnalyses size before:`, ctx.foodAnalyses?.size || 0);
    console.log(`[showFoodAnalysis] ctx.tempData keys before:`, ctx.tempData ? Object.keys(ctx.tempData) : 'undefined');
    
    // Store analysis in context and database
    if (ctx.foodAnalyses) {
      ctx.foodAnalyses.set(analysisId, analysis);
      console.log(`[showFoodAnalysis] Added to ctx.foodAnalyses`);
    } else {
      console.error(`[showFoodAnalysis] ctx.foodAnalyses is null!`);
    }
    
    // Also save to database for persistence across messages
    try {
      // Load existing session data to preserve other data
      const existingSession = await getUserSession(ctx.from!.id);
      console.log(`[showFoodAnalysis] Existing session loaded:`, existingSession);
      
      const tempData = existingSession?.tempData || {};
      tempData[analysisId] = analysis;
      
      // Update ctx.tempData to keep it in sync
      if (!ctx.tempData) {
        ctx.tempData = {};
        console.log(`[showFoodAnalysis] Initialized ctx.tempData`);
      }
      ctx.tempData[analysisId] = analysis;
      
      console.log(`[showFoodAnalysis] Saving analysis with ID: ${analysisId} to database`);
      console.log(`[showFoodAnalysis] tempData keys before save:`, Object.keys(tempData));
      console.log(`[showFoodAnalysis] ctx.tempData keys after update:`, Object.keys(ctx.tempData));
      
      // Don't set currentStep to avoid interfering with other operations
      console.log(`[showFoodAnalysis] About to call saveUserSession`);
      await saveUserSession(ctx.from!.id, existingSession?.currentStep, tempData);
      console.log(`[showFoodAnalysis] Analysis saved successfully to database`);
      
      // Verify the save worked
      const verifySession = await getUserSession(ctx.from!.id);
      console.log(`[showFoodAnalysis] Verification - session after save:`, {
        currentStep: verifySession?.currentStep,
        tempDataKeys: verifySession?.tempData ? Object.keys(verifySession.tempData) : 'undefined'
      });
      
    } catch (error) {
      console.error('Error saving food analysis to database:', error);
      console.error('Error details:', JSON.stringify(error, null, 2));
    }

    console.log(`[showFoodAnalysis] About to create analysis text and keyboard`);

    const analysisText = `
üçé <b>–ê–Ω–∞–ª–∏–∑ –µ–¥—ã</b>

<b>–ë–ª—é–¥–æ:</b> ${analysis.name}
<b>–í–µ—Å:</b> ${analysis.weight}–≥
<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> ${analysis.ingredients.join(', ')}

<b>–ö–ë–ñ–£:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${formatCalories(analysis.calories)}
‚Ä¢ ${formatMacros({ protein: analysis.protein, fat: analysis.fat, carbs: analysis.carbs })}
${analysis.fiber ? `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${analysis.fiber}–≥` : ''}
${analysis.sugar ? `‚Ä¢ –°–∞—Ö–∞—Ä: ${analysis.sugar}–≥` : ''}

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏?
  `;

    console.log(`[showFoodAnalysis] Analysis text created successfully`);

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫', callback_data: `save_food_breakfast_${analysisId}` },
            { text: 'üåû –û–±–µ–¥', callback_data: `save_food_lunch_${analysisId}` },
          ],
          [
            { text: 'üåô –£–∂–∏–Ω', callback_data: `save_food_dinner_${analysisId}` },
            { text: 'üç™ –ü–µ—Ä–µ–∫—É—Å', callback_data: `save_food_snack_${analysisId}` },
          ],
          [
            { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `edit_food_${analysisId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_food' },
          ],
        ],
      },
    };

    console.log(`[showFoodAnalysis] Keyboard created successfully`);

    await ctx.replyWithHTML(analysisText, keyboard);
    console.log(`[showFoodAnalysis] Message sent successfully`);
    
  } catch (error) {
    console.error(`[showFoodAnalysis] Error in showFoodAnalysis:`, error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Save food entry to database by analysis ID
 */
export async function saveFoodEntryById(ctx: CustomContext, mealType: MealType, analysisId: string): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`[saveFoodEntryById] Attempting to save analysis with ID: ${analysisId}`);
    console.log(`[saveFoodEntryById] ctx.foodAnalyses:`, ctx.foodAnalyses);
    console.log(`[saveFoodEntryById] ctx.tempData:`, ctx.tempData);

    // Get analysis from context or database
    let analysis = null;
    
    // First try to get from context
    if (ctx.foodAnalyses && ctx.foodAnalyses.has(analysisId)) {
      analysis = ctx.foodAnalyses.get(analysisId);
      console.log(`[saveFoodEntryById] Found analysis in ctx.foodAnalyses`);
    }
    // If not in context, try to get from tempData
    else if (ctx.tempData && ctx.tempData[analysisId]) {
      analysis = ctx.tempData[analysisId];
      console.log(`[saveFoodEntryById] Found analysis in ctx.tempData`);
    }
    // If still not found, try to reload from database
    else {
      console.log(`[saveFoodEntryById] Analysis not found in context, trying to reload from database`);
      const session = await getUserSession(ctx.from!.id);
      if (session?.tempData && session.tempData[analysisId]) {
        analysis = session.tempData[analysisId];
        console.log(`[saveFoodEntryById] Found analysis in database session`);
        
        // Update context to keep it in sync
        if (!ctx.tempData) {
          ctx.tempData = {};
        }
        ctx.tempData[analysisId] = analysis;
        
        if (!ctx.foodAnalyses) {
          ctx.foodAnalyses = new Map();
        }
        ctx.foodAnalyses.set(analysisId, analysis);
      }
    }
    
    if (!analysis) {
      console.error(`[saveFoodEntryById] Analysis not found for ID: ${analysisId}`);
      console.error(`[saveFoodEntryById] Available keys in ctx.tempData:`, ctx.tempData ? Object.keys(ctx.tempData) : 'tempData is null');
      console.error(`[saveFoodEntryById] Available keys in ctx.foodAnalyses:`, ctx.foodAnalyses ? Array.from(ctx.foodAnalyses.keys()) : 'foodAnalyses is null');
      await ctx.reply('‚ùå –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    console.log(`[saveFoodEntryById] Found analysis:`, analysis);

    const entry = {
      user_id: ctx.user.id,
      meal_type: mealType,
      food_data: analysis,
      timestamp: new Date().toISOString(),
    };

    await addFoodEntry(entry);

    // Clean up analysis from context
    if (ctx.foodAnalyses) {
      ctx.foodAnalyses.delete(analysisId);
    }
    if (ctx.tempData && ctx.tempData[analysisId]) {
      delete ctx.tempData[analysisId];
    }
    
    // Clear entire session from database after successful save
    await clearUserSession(ctx.from!.id);
    console.log(`[saveFoodEntryById] Session cleared after successful save`);

    // Update dashboard instead of showing success message
    await updateDashboardMessage(ctx);
    
    // Show quick confirmation
    await ctx.answerCbQuery(`‚úÖ ${getMealTypeText(mealType)} –¥–æ–±–∞–≤–ª–µ–Ω!`);

  } catch (error) {
    console.error('Error saving food entry:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Save food entry to database (legacy function)
 */
export async function saveFoodEntry(ctx: CustomContext, mealType: MealType, analysis: FoodAnalysis): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const entry = {
      user_id: ctx.user.id,
      meal_type: mealType,
      food_data: analysis,
      timestamp: new Date().toISOString(),
    };

    await addFoodEntry(entry);

    // Clear session from database after successful save
    await clearUserSession(ctx.from!.id);
    console.log(`[saveFoodEntry] Session cleared after successful save`);

    // Update dashboard instead of showing success message
    await updateDashboardMessage(ctx);
    
    // Show quick confirmation
    await ctx.answerCbQuery(`‚úÖ ${getMealTypeText(mealType)} –¥–æ–±–∞–≤–ª–µ–Ω!`);

  } catch (error) {
    console.error('Error saving food entry:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Handle food editing
 */
/**
 * Handle food editing by analysis ID
 */
export async function handleFoodEditById(ctx: CustomContext, analysisId: string): Promise<void> {
  try {
    // Get analysis from context or database
    let analysis = null;
    
    // First try to get from context
    if (ctx.foodAnalyses && ctx.foodAnalyses.has(analysisId)) {
      analysis = ctx.foodAnalyses.get(analysisId);
    }
    // If not in context, try to get from database
    else if (ctx.tempData && ctx.tempData[analysisId]) {
      analysis = ctx.tempData[analysisId];
    }
    
    if (!analysis) {
      await ctx.reply('‚ùå –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      return;
    }

    await handleFoodEdit(ctx, analysis, analysisId);
  } catch (error) {
    console.error('Error editing food:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–¥—ã');
  }
}

export async function handleFoodEdit(ctx: CustomContext, analysis: FoodAnalysis, analysisId: string): Promise<void> {
  try {
    // Save analysis ID and data to session for text handler
    const session = await getUserSession(ctx.from!.id);
    const tempData = session?.tempData || {};
    tempData[analysisId] = analysis;
    tempData['editing_analysis_id'] = analysisId; // Store which analysis we're editing
    
    const currentStep = `edit_food_${analysisId}`;
    await saveUserSession(ctx.from!.id, currentStep, tempData);
    
    console.log(`[handleFoodEdit] Set editing mode for analysis ${analysisId}`);
    
    const currentInfo = `
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞</b>

<b>–¢–µ–∫—É—â–µ–µ –±–ª—é–¥–æ:</b> ${analysis.name}
<b>–í–µ—Å:</b> ${analysis.weight}–≥
<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> ${analysis.ingredients.join(', ')}

<b>–¢–µ–∫—É—â–∏–µ –ö–ë–ñ–£:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${analysis.calories} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: ${analysis.protein}–≥ | –ñ–∏—Ä—ã: ${analysis.fat}–≥ | –£–≥–ª–µ–≤–æ–¥—ã: ${analysis.carbs}–≥

<b>–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</b>

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–¥–æ–±–∞–≤—å 10–≥ –º–∞—Å–ª–∞"
‚Ä¢ "–µ—â–µ 50–≥ —Ä–∏—Å–∞"
‚Ä¢ "—É–±–µ—Ä–∏ –±–∞–Ω–∞–Ω"
‚Ä¢ "–∂–∞—Ä–µ–Ω–æ–µ –Ω–∞ –º–∞—Å–ª–µ"

–ù–∞–ø–∏—à–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –±–ª—é–¥—É:
    `;
    
    await ctx.reply(currentInfo, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('[handleFoodEdit] Error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
  }
}

/**
 * Handle food edit text input
 */
export async function handleFoodEditText(ctx: CustomContext, text: string, analysisId: string): Promise<void> {
  try {
    console.log(`[handleFoodEditText] Editing analysis ${analysisId} with text: ${text}`);
    
    // Get original analysis
    const session = await getUserSession(ctx.from!.id);
    const analysis = session?.tempData?.[analysisId];
    
    if (!analysis) {
      await ctx.reply('‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–¥—É.');
      await clearUserSession(ctx.from!.id);
      return;
    }
    
    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    
    // Determine if this is a correction or an addition based on user's text
    const lowerText = text.toLowerCase();
    const isCorrectionKeywords = ['–Ω–µ ', '–Ω–µ—Ç', '–æ—à–∏–±', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ', '—ç—Ç–æ '];
    const isCorrection = isCorrectionKeywords.some(keyword => lowerText.includes(keyword));
    
    let updatedDescription: string;
    
    if (isCorrection) {
      // If user is correcting the recognition, use only their text with a clear instruction
      updatedDescription = `–ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${text}`;
      console.log(`[handleFoodEditText] Detected correction. New description: ${updatedDescription}`);
    } else {
      // If user is adding to the meal, combine with original
      const originalDescription = `${analysis.name} ${analysis.weight}–≥ (${analysis.ingredients.join(', ')})`;
      updatedDescription = `${originalDescription}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${text}`;
      console.log(`[handleFoodEditText] Detected addition. Original: ${originalDescription}, Updated: ${updatedDescription}`);
    }
    
    // Re-analyze with updated description
    const updatedAnalysis = await analyzeFoodFromText(updatedDescription);
    
    console.log(`[handleFoodEditText] Updated analysis:`, updatedAnalysis);
    
    // Show updated analysis with same flow as original
    await showFoodAnalysis(ctx, updatedAnalysis);
    
    // Clear editing session
    await clearUserSession(ctx.from!.id);
    ctx.currentStep = undefined;
    
  } catch (error) {
    console.error('[handleFoodEditText] Error:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å –±–ª—é–¥–æ –∑–∞–Ω–æ–≤–æ.');
    await clearUserSession(ctx.from!.id);
  }
}

/**
 * Get meal type text in Russian
 */
function getMealTypeText(mealType: MealType): string {
  const types = {
    breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
    lunch: '–û–±–µ–¥',
    dinner: '–£–∂–∏–Ω',
    snack: '–ü–µ—Ä–µ–∫—É—Å',
  };
  return types[mealType];
}

/**
 * Show food history for today
 */
export async function showFoodHistory(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    const entries = await getFoodEntriesByDate(ctx.user.id, today);

    if (entries.length === 0) {
      await ctx.reply('üìã –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –µ–¥—É.');
      return;
    }

    let historyText = 'üìã <b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n';
    let totalCalories = 0;
    let totalProtein = 0;
    let totalFat = 0;
    let totalCarbs = 0;

    // Group by meal type
    const meals = {
      breakfast: [] as any[],
      lunch: [] as any[],
      dinner: [] as any[],
      snack: [] as any[],
    };

    entries.forEach(entry => {
      meals[entry.meal_type].push(entry);
      const food = entry.food_data;
      totalCalories += food.calories;
      totalProtein += food.protein;
      totalFat += food.fat;
      totalCarbs += food.carbs;
    });

    // Display each meal type
    Object.entries(meals).forEach(([mealType, mealEntries]) => {
      if (mealEntries.length > 0) {
        historyText += `\n<b>${getMealTypeText(mealType as MealType)}:</b>\n`;
        mealEntries.forEach(entry => {
          const food = entry.food_data;
          historyText += `‚Ä¢ ${food.name} (${food.weight}–≥) - ${formatCalories(food.calories)}\n`;
        });
      }
    });

    historyText += `\n<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n`;
    historyText += `${formatCalories(totalCalories)} | ${formatMacros({ protein: totalProtein, fat: totalFat, carbs: totalCarbs })}`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' }],
          [{ text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
        ],
      },
    };

    await ctx.replyWithHTML(historyText, keyboard);

  } catch (error) {
    console.error('Error showing food history:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–∏—Ç–∞–Ω–∏—è.');
  }
}

// Import the function we need
import { getFoodEntriesByDate } from '../database/queries';
