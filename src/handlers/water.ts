import { Context } from 'telegraf';
import { addWaterEntry, getWaterEntriesByDate } from '../database/queries';
import { calculateProgress, generateWaterProgressBar, formatWater } from '../utils/calculations';
import { editOrReply } from '../utils/telegram';
import type { CustomContext } from '../types';

/**
 * Add water entry and update message
 */
export async function addWater(ctx: CustomContext, amount: number): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const entry = {
      user_id: ctx.user.id,
      amount: amount,
      timestamp: new Date().toISOString(),
    };

    await addWaterEntry(entry);

    // Update the water menu message
    await updateWaterMenuMessage(ctx);

  } catch (error) {
    console.error('Error adding water:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Update water menu message with current data
 */
export async function updateWaterMenuMessage(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      return;
    }

    // Get today's water data
    const today = new Date().toISOString().split('T')[0];
    const todayEntries = await getWaterEntriesByDate(ctx.user.id, today);
    const totalToday = todayEntries.reduce((sum, entry) => sum + entry.amount, 0);
    const target = 2000; // Default target
    const progress = calculateProgress(totalToday, target);

    const waterText = `
üíß <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã</b>

–°–µ–≥–æ–¥–Ω—è: ${formatWater(totalToday)}/${formatWater(target)} (${progress}%)

${generateWaterProgressBar(progress)}

${getWaterMotivation(progress)}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üíß 100–º–ª', callback_data: 'water_100' },
            { text: 'ü•§ 250–º–ª', callback_data: 'water_250' },
          ],
          [
            { text: 'üç∂ 500–º–ª', callback_data: 'water_500' },
            { text: 'üçº 750–º–ª', callback_data: 'water_750' },
          ],
          [
            { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã', callback_data: 'water_history' },
            { text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    // Edit the message instead of sending new one
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      await ctx.editMessageText(waterText, { 
        parse_mode: 'HTML',
        reply_markup: keyboard.reply_markup 
      });
      await ctx.answerCbQuery(`üíß –í–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
    } else {
      await ctx.replyWithHTML(waterText, keyboard);
    }

  } catch (error) {
    console.error('Error updating water menu:', error);
  }
}

/**
 * Show water tracking menu
 */
export async function showWaterMenu(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Get today's water data
    const today = new Date().toISOString().split('T')[0];
    const todayEntries = await getWaterEntriesByDate(ctx.user.id, today);
    const totalToday = todayEntries.reduce((sum, entry) => sum + entry.amount, 0);
    const target = 2000; // Default target
    const progress = calculateProgress(totalToday, target);

    const waterText = `
üíß <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥—ã</b>

–°–µ–≥–æ–¥–Ω—è: ${formatWater(totalToday)}/${formatWater(target)} (${progress}%)

${generateWaterProgressBar(progress)}

${getWaterMotivation(progress)}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üíß 100–º–ª', callback_data: 'water_100' },
            { text: 'ü•§ 250–º–ª', callback_data: 'water_250' },
          ],
          [
            { text: 'üç∂ 500–º–ª', callback_data: 'water_500' },
            { text: 'üçº 750–º–ª', callback_data: 'water_750' },
          ],
          [
            { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã', callback_data: 'water_history' },
            { text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await editOrReply(ctx, waterText, keyboard);

  } catch (error) {
    console.error('Error showing water menu:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –≤–æ–¥—ã.');
  }
}

/**
 * Show water history
 */
export async function showWaterHistory(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    const todayEntries = await getWaterEntriesByDate(ctx.user.id, today);

    if (todayEntries.length === 0) {
      await ctx.reply('üíß –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â–µ –Ω–µ –ø–∏–ª –≤–æ–¥—É.');
      return;
    }

    let historyText = 'üíß <b>–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è:</b>\n\n';
    let totalAmount = 0;

    todayEntries.forEach((entry, index) => {
      const time = new Date(entry.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
      historyText += `${index + 1}. ${time} - ${formatWater(entry.amount)}\n`;
      totalAmount += entry.amount;
    });

    const target = 2000;
    const progress = calculateProgress(totalAmount, target);

    historyText += `\n<b>–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è:</b> ${formatWater(totalAmount)}/${formatWater(target)} (${progress}%)\n`;
    historyText += `${generateWaterProgressBar(progress)}\n`;
    historyText += getWaterMotivation(progress);

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' },
            { text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(historyText, keyboard);

  } catch (error) {
    console.error('Error showing water history:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–¥—ã.');
  }
}

/**
 * Get motivational message for water tracking
 */
function getWaterMotivation(progress: number): string {
  if (progress >= 100) {
    return '\nüéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –¥–æ—Å—Ç–∏–≥ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã!';
  } else if (progress >= 80) {
    return '\nüëç –ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!';
  } else if (progress >= 50) {
    return '\nüí™ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–∏—Ç—å –≤–æ–¥—É!';
  } else if (progress >= 25) {
    return '\nüíß –ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!';
  } else {
    return '\nüö∞ –ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≤–æ–¥—ã! –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!';
  }
}

/**
 * Show water statistics for the week
 */
export async function showWaterStats(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Get water entries for the last 7 days
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - 6);

    // This would require a more complex query, for now showing today's data
    const today = new Date().toISOString().split('T')[0];
    const todayEntries = await getWaterEntriesByDate(ctx.user.id, today);
    const totalToday = todayEntries.reduce((sum, entry) => sum + entry.amount, 0);

    const statsText = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã</b>

<b>–°–µ–≥–æ–¥–Ω—è:</b> ${formatWater(totalToday)}
<b>–¶–µ–ª—å:</b> ${formatWater(2000)}
<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> ${calculateProgress(totalToday, 2000)}%

${generateWaterProgressBar(calculateProgress(totalToday, 2000))}

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ü–µ–π –≤–æ–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –ù–æ—Å–∏ —Å —Å–æ–±–æ–π –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã
‚Ä¢ –î–æ–±–∞–≤–ª—è–π –ª–∏–º–æ–Ω –∏–ª–∏ –º—è—Ç—É –¥–ª—è –≤–∫—É—Å–∞
‚Ä¢ –ï—à—å –±–æ–ª—å—à–µ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –æ–≤–æ—â–µ–π
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' },
            { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'water_history' },
          ],
          [
            { text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(statsText, keyboard);

  } catch (error) {
    console.error('Error showing water stats:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ã.');
  }
}
