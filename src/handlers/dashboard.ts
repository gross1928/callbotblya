import { Context } from 'telegraf';
import { getDashboardData } from '../database/queries';
import { calculateProgress, generateProgressBar, formatCalories, formatMacros, formatWater } from '../utils/calculations';
import type { CustomContext, DashboardData } from '../types';

/**
 * Show dashboard with today's data
 */
export async function showDashboard(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    const dashboardData = await getDashboardData(ctx.user.id, today);

    await displayDashboard(ctx, dashboardData);

  } catch (error) {
    console.error('Error showing dashboard:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—à–±–æ—Ä–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * Display dashboard data with progress bars
 */
async function displayDashboard(ctx: CustomContext, data: DashboardData): Promise<void> {
  const { calories, macros, water, weight } = data;

  // Calculate progress percentages
  const caloriesProgress = calculateProgress(calories.consumed, calories.target);
  const proteinProgress = calculateProgress(macros.protein.consumed, macros.protein.target);
  const fatProgress = calculateProgress(macros.fat.consumed, macros.fat.target);
  const carbsProgress = calculateProgress(macros.carbs.consumed, macros.carbs.target);
  const waterProgress = calculateProgress(water.consumed, water.target);

  // Generate progress bars
  const caloriesBar = generateProgressBar(caloriesProgress);
  const proteinBar = generateProgressBar(proteinProgress);
  const fatBar = generateProgressBar(fatProgress);
  const carbsBar = generateProgressBar(carbsProgress);
  const waterBar = generateProgressBar(waterProgress);

  // Determine emojis based on progress
  const caloriesEmoji = caloriesProgress >= 100 ? 'üéØ' : caloriesProgress >= 80 ? 'üìà' : 'üìä';
  const waterEmoji = waterProgress >= 100 ? 'üíß' : waterProgress >= 80 ? 'üí¶' : 'üö∞';

  const dashboardText = `
üìä <b>–î–∞—à–±–æ—Ä–¥ –Ω–∞ ${new Date().toLocaleDateString('ru-RU')}</b>

${caloriesEmoji} <b>–ö–∞–ª–æ—Ä–∏–∏</b>
${calories.consumed}/${calories.target} –∫–∫–∞–ª (${caloriesProgress}%)
${caloriesBar}

ü•ó <b>–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã</b>
<b>–ë–µ–ª–∫–∏:</b> ${macros.protein.consumed}/${macros.protein.target}–≥ (${proteinProgress}%)
${proteinBar}

<b>–ñ–∏—Ä—ã:</b> ${macros.fat.consumed}/${macros.fat.target}–≥ (${fatProgress}%)
${fatBar}

<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> ${macros.carbs.consumed}/${macros.carbs.target}–≥ (${carbsProgress}%)
${carbsBar}

${waterEmoji} <b>–í–æ–¥–∞</b>
${formatWater(water.consumed)}/${formatWater(water.target)} (${waterProgress}%)
${waterBar}

${weight ? `‚öñÔ∏è <b>–í–µ—Å:</b> ${weight} –∫–≥` : ''}

${getMotivationalMessage(caloriesProgress, waterProgress)}
  `;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' },
          { text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' },
        ],
        [
          { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –µ–¥—ã', callback_data: 'food_history' },
          { text: 'ü§ñ AI-–∫–æ—É—á', callback_data: 'ai_coach' },
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'dashboard' },
          { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        ],
      ],
    },
  };

  await ctx.replyWithHTML(dashboardText, keyboard);
}

/**
 * Get motivational message based on progress
 */
function getMotivationalMessage(caloriesProgress: number, waterProgress: number): string {
  if (caloriesProgress >= 100 && waterProgress >= 100) {
    return '\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –¥–æ—Å—Ç–∏–≥ –≤—Å–µ—Ö —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!';
  } else if (caloriesProgress >= 80 && waterProgress >= 80) {
    return '\nüëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!';
  } else if (caloriesProgress < 50 || waterProgress < 50) {
    return '\nüí™ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ –∏ –≤–æ–¥—É! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!';
  } else {
    return '\nüìà –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
  }
}

/**
 * Show detailed nutrition breakdown
 */
export async function showNutritionBreakdown(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    const dashboardData = await getDashboardData(ctx.user.id, today);

    const { calories, macros } = dashboardData;
    const remainingCalories = calories.target - calories.consumed;
    const remainingProtein = macros.protein.target - macros.protein.consumed;
    const remainingFat = macros.fat.target - macros.fat.consumed;
    const remainingCarbs = macros.carbs.target - macros.carbs.consumed;

    const breakdownText = `
ü•ó <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–∏—Ç–∞–Ω–∏—è</b>

üìä <b>–ö–∞–ª–æ—Ä–∏–∏:</b>
‚Ä¢ –°—ä–µ–¥–µ–Ω–æ: ${calories.consumed} –∫–∫–∞–ª
‚Ä¢ –¶–µ–ª—å: ${calories.target} –∫–∫–∞–ª
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${remainingCalories > 0 ? remainingCalories : 0} –∫–∫–∞–ª

ü•© <b>–ë–µ–ª–∫–∏:</b>
‚Ä¢ –°—ä–µ–¥–µ–Ω–æ: ${macros.protein.consumed}–≥
‚Ä¢ –¶–µ–ª—å: ${macros.protein.target}–≥
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${remainingProtein > 0 ? remainingProtein : 0}–≥

ü•ë <b>–ñ–∏—Ä—ã:</b>
‚Ä¢ –°—ä–µ–¥–µ–Ω–æ: ${macros.fat.consumed}–≥
‚Ä¢ –¶–µ–ª—å: ${macros.fat.target}–≥
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${remainingFat > 0 ? remainingFat : 0}–≥

üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b>
‚Ä¢ –°—ä–µ–¥–µ–Ω–æ: ${macros.carbs.consumed}–≥
‚Ä¢ –¶–µ–ª—å: ${macros.carbs.target}–≥
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${remainingCarbs > 0 ? remainingCarbs : 0}–≥

${getNutritionAdvice(remainingCalories, remainingProtein, remainingFat, remainingCarbs)}
  `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
          [{ text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' }],
        ],
      },
    };

    await ctx.replyWithHTML(breakdownText, keyboard);

  } catch (error) {
    console.error('Error showing nutrition breakdown:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –ø–∏—Ç–∞–Ω–∏—è.');
  }
}

/**
 * Get nutrition advice based on remaining macros
 */
function getNutritionAdvice(
  remainingCalories: number,
  remainingProtein: number,
  remainingFat: number,
  remainingCarbs: number
): string {
  if (remainingCalories <= 0) {
    return '\n‚ö†Ô∏è –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π!';
  }

  const advice = [];
  
  if (remainingProtein > 20) {
    advice.push('ü•© –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ (–º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥)');
  }
  
  if (remainingFat > 15) {
    advice.push('ü•ë –î–æ–±–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã (–æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ)');
  }
  
  if (remainingCarbs > 30) {
    advice.push('üçû –î–æ–±–∞–≤—å —É–≥–ª–µ–≤–æ–¥—ã (–∫–∞—à–∏, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏)');
  }

  if (advice.length === 0) {
    return '\n‚úÖ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –ë–ñ–£ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!';
  }

  return '\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n' + advice.join('\n');
}
