import { Context } from 'telegraf';
import type { CustomContext } from '../types';

/**
 * Show subscription page
 */
export async function showSubscriptionPage(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const { subscription_status, trial_end_date, subscription_end_date } = ctx.user;

    let statusText = '';
    let statusEmoji = '';
    let daysRemaining = 0;

    if (subscription_status === 'trial' && trial_end_date) {
      const trialEnd = new Date(trial_end_date);
      const now = new Date();
      daysRemaining = Math.ceil((trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysRemaining > 0) {
        statusEmoji = '‚è∞';
        statusText = `–£ –≤–∞—Å —Ç—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>${daysRemaining} ${getDaysWord(daysRemaining)}</b>`;
      } else {
        statusEmoji = '‚ö†Ô∏è';
        statusText = '–¢—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫\nüí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è';
      }
    } else if (subscription_status === 'active' && subscription_end_date) {
      const subEnd = new Date(subscription_end_date);
      const now = new Date();
      daysRemaining = Math.ceil((subEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysRemaining > 0) {
        statusEmoji = '‚úÖ';
        statusText = `–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\nüìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>${formatDate(subEnd)}</b>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>${daysRemaining} ${getDaysWord(daysRemaining)}</b>`;
      } else {
        statusEmoji = '‚ö†Ô∏è';
        statusText = '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\nüí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è';
      }
    } else {
      statusEmoji = '‚ö†Ô∏è';
      statusText = '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\nüí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è';
    }

    const subscriptionText = `
${statusEmoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ "–î–∞–ï–¥–∞"</b>

${statusText}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üéØ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>

üçé <b>–ê–Ω–∞–ª–∏–∑ –µ–¥—ã</b>
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –µ–¥—ã —á–µ—Ä–µ–∑ AI
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –±–ª—é–¥
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏

üìä <b>–¢—Ä–µ–∫–∏–Ω–≥ –ø–∏—Ç–∞–Ω–∏—è</b>
‚Ä¢ –î–∞—à–±–æ—Ä–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ë–ñ–£
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üíß <b>–¢—Ä–µ–∫–∏–Ω–≥ –≤–æ–¥—ã</b>
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–π
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è

ü§ñ <b>AI-–∫–æ—É—á</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 24/7
‚Ä¢ –£—á–µ—Ç –≤–∞—à–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

üß™ <b>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b>
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –£—á–µ—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö

üì¶ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü

${(subscription_status === 'trial' && daysRemaining <= 0) || subscription_status === 'expired' ? 
  '\nüéÅ <b>–ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã</b>' : 
  subscription_status === 'trial' && daysRemaining > 0 ? 
  '\nüéÅ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –Ω–∞ –ø–æ–ª–Ω—É—é!</b>' : 
  '\n‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>'}
    `.trim();

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...(subscription_status === 'expired' || (subscription_status === 'trial' && daysRemaining <= 0) || 
              (subscription_status === 'active' && daysRemaining <= 3) ? 
            [[{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }]] : []),
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
        ],
      },
    };

    // Edit message if it's a callback query, otherwise send new message
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      try {
        await ctx.editMessageText(subscriptionText, { 
          parse_mode: 'HTML',
          reply_markup: keyboard.reply_markup 
        });
      } catch (error) {
        await ctx.replyWithHTML(subscriptionText, keyboard);
      }
    } else {
      await ctx.replyWithHTML(subscriptionText, keyboard);
    }

  } catch (error) {
    console.error('Error showing subscription page:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ.');
  }
}

/**
 * Handle buy subscription button (placeholder for now)
 */
export async function handleBuySubscription(ctx: CustomContext): Promise<void> {
  try {
    await ctx.answerCbQuery();
    
    const message = `
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ "–î–∞–ï–¥–∞" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:

[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ]

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü
‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> 30 –¥–Ω–µ–π

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ @grossvn
    `.trim();

    await ctx.reply(message, { parse_mode: 'HTML' });

  } catch (error) {
    console.error('Error handling buy subscription:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Check if user has active subscription or trial
 */
export function hasActiveAccess(user: any): boolean {
  if (!user) return false;

  const now = new Date();

  // Check trial
  if (user.subscription_status === 'trial' && user.trial_end_date) {
    const trialEnd = new Date(user.trial_end_date);
    if (now <= trialEnd) {
      return true;
    }
  }

  // Check active subscription
  if (user.subscription_status === 'active' && user.subscription_end_date) {
    const subEnd = new Date(user.subscription_end_date);
    if (now <= subEnd) {
      return true;
    }
  }

  return false;
}

/**
 * Show blocked message when user tries to use bot without subscription
 */
export async function showSubscriptionRequired(ctx: CustomContext): Promise<void> {
  try {
    await ctx.answerCbQuery('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞');
    
    const message = `
‚è∞ <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>

–í–∞—à —Ç—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.

<b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ üçé –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ü§ñ AI-–∫–æ—É—á —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ üß™ –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí∞ <b>–í—Å–µ–≥–æ 199‚ÇΩ/–º–µ—Å—è—Ü</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    `.trim();

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }],
          [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ', callback_data: 'subscription' }],
        ],
      },
    };

    await ctx.reply(message, { parse_mode: 'HTML', ...keyboard });

  } catch (error) {
    console.error('Error showing subscription required:', error);
  }
}

/**
 * Helper function to format date
 */
function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
}

/**
 * Helper function to get correct word form for days
 */
function getDaysWord(days: number): string {
  if (days % 10 === 1 && days % 100 !== 11) {
    return '–¥–µ–Ω—å';
  } else if ([2, 3, 4].includes(days % 10) && ![12, 13, 14].includes(days % 100)) {
    return '–¥–Ω—è';
  } else {
    return '–¥–Ω–µ–π';
  }
}
