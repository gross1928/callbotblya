import { Context } from 'telegraf';
import { createUserProfile, saveUserSession, clearUserSession } from '../database/queries';
import { calculateBMR, calculateTDEE, calculateTargetCalories, calculateTargetMacros } from '../utils/calculations';
import type { CustomContext, UserProfile, ActivityLevel, UserGoal } from '../types';

interface ProfileData {
  name?: string;
  age?: number;
  gender?: 'male' | 'female';
  height?: number;
  weight?: number;
  activityLevel?: ActivityLevel;
  goal?: UserGoal;
  targetWeight?: number;
  targetDate?: string;
}

const activityLevels: { [key: string]: ActivityLevel } = {
  '1': 'sedentary',
  '2': 'light',
  '3': 'moderate',
  '4': 'active',
  '5': 'very_active',
};

const goals: { [key: string]: UserGoal } = {
  '1': 'lose',
  '2': 'maintain',
  '3': 'gain',
};

export async function handleProfileStep(ctx: CustomContext, message: string): Promise<void> {
  console.log('handleProfileStep called:', { 
    currentStep: ctx.currentStep, 
    hasTempData: !!ctx.tempData,
    message: message.substring(0, 50) 
  });
  
  if (!ctx.currentStep || !ctx.tempData) {
    console.log('Missing currentStep or tempData, returning');
    return;
  }

  const step = ctx.currentStep;
  const data = ctx.tempData as ProfileData;

  switch (step) {
    case 'name':
      await handleName(ctx, message, data);
      break;
    case 'age':
      await handleAge(ctx, message, data);
      break;
    case 'gender':
      await handleGender(ctx, message, data);
      break;
    case 'height':
      await handleHeight(ctx, message, data);
      break;
    case 'weight':
      await handleWeight(ctx, message, data);
      break;
    case 'activity':
      await handleActivity(ctx, message, data);
      break;
    case 'goal':
      await handleGoal(ctx, message, data);
      break;
    case 'target_weight':
      await handleTargetWeight(ctx, message, data);
      break;
    case 'target_date':
      await handleTargetDate(ctx, message, data);
      break;
    default:
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  }
}

async function handleName(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  if (message.length < 2) {
    await ctx.reply('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:');
    return;
  }

  data.name = message.trim();
  ctx.tempData = data;
  ctx.currentStep = 'age';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'age', data);

  await ctx.reply(
    `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${data.name}! üòä\n\n` +
    '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'
  );
}

async function handleAge(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  const age = parseInt(message);
  
  if (isNaN(age) || age < 1 || age > 150) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 150 –ª–µ—Ç):');
    return;
  }

  data.age = age;
  ctx.tempData = data;
  ctx.currentStep = 'gender';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'gender', data);

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'gender_male' }],
        [{ text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'gender_female' }],
      ],
    },
  };

  await ctx.reply('–í—ã–±–µ—Ä–∏ –ø–æ–ª:', keyboard);
}

async function handleGender(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  // This will be handled by callback query
}

export async function handleGenderCallback(ctx: CustomContext, gender: 'male' | 'female'): Promise<void> {
  const data = ctx.tempData as ProfileData;
  data.gender = gender;
  ctx.tempData = data;
  ctx.currentStep = 'height';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'height', data);

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.\n\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: 175'
  );
}

async function handleHeight(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  const height = parseFloat(message);
  
  if (isNaN(height) || height < 50 || height > 250) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 50 –¥–æ 250):');
    return;
  }

  data.height = height;
  ctx.tempData = data;
  ctx.currentStep = 'weight';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'weight', data);

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.\n\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: 70.5'
  );
}

async function handleWeight(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  const weight = parseFloat(message);
  
  if (isNaN(weight) || weight < 20 || weight > 300) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 20 –¥–æ 300):');
    return;
  }

  data.weight = weight;
  ctx.tempData = data;
  ctx.currentStep = 'activity';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'activity', data);

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '1Ô∏è‚É£ –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)', callback_data: 'activity_1' }],
        [{ text: '2Ô∏è‚É£ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–Ω–µ–¥–µ–ª—è)', callback_data: 'activity_2' }],
        [{ text: '3Ô∏è‚É£ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥–µ–ª—è)', callback_data: 'activity_3' }],
        [{ text: '4Ô∏è‚É£ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥–µ–ª—è)', callback_data: 'activity_4' }],
        [{ text: '5Ô∏è‚É£ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–¥–µ–Ω—å)', callback_data: 'activity_5' }],
      ],
    },
  };

  await ctx.reply(
    '–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:',
    keyboard
  );
}

async function handleActivity(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  // This will be handled by callback query
}

export async function handleActivityCallback(ctx: CustomContext, activityKey: string): Promise<void> {
  const data = ctx.tempData as ProfileData;
  const activityLevel = activityLevels[activityKey];
  
  if (!activityLevel) {
    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    return;
  }

  data.activityLevel = activityLevel;
  ctx.tempData = data;
  ctx.currentStep = 'goal';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'goal', data);

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìâ –ü–æ—Ö—É–¥–µ—Ç—å', callback_data: 'goal_1' }],
        [{ text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å', callback_data: 'goal_2' }],
        [{ text: 'üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', callback_data: 'goal_3' }],
      ],
    },
  };

  await ctx.reply(
    '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?',
    keyboard
  );
}

async function handleGoal(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  // This will be handled by callback query
}

export async function handleGoalCallback(ctx: CustomContext, goalKey: string): Promise<void> {
  const data = ctx.tempData as ProfileData;
  const goal = goals[goalKey];
  
  if (!goal) {
    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    return;
  }

  data.goal = goal;
  ctx.tempData = data;

  if (goal === 'lose' || goal === 'gain') {
    ctx.currentStep = 'target_weight';
    // Save session state to database
    await saveUserSession(ctx.from!.id, 'target_weight', data);
    
    await ctx.reply(
      '–£–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.\n\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: 65'
    );
  } else {
    await finishProfileRegistration(ctx, data);
  }
}

async function handleTargetWeight(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  const targetWeight = parseFloat(message);
  
  if (isNaN(targetWeight) || targetWeight < 20 || targetWeight > 300) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 20 –¥–æ 300):');
    return;
  }

  data.targetWeight = targetWeight;
  ctx.tempData = data;
  ctx.currentStep = 'target_date';

  // Save session state to database
  await saveUserSession(ctx.from!.id, 'target_date', data);

  await ctx.reply(
    '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ –≤–µ—Å–∞? (–≤ –º–µ—Å—è—Ü–∞—Ö)\n\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: 6'
  );
}

async function handleTargetDate(ctx: CustomContext, message: string, data: ProfileData): Promise<void> {
  const months = parseInt(message);
  
  if (isNaN(months) || months < 1 || months > 60) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ (–æ—Ç 1 –¥–æ 60):');
    return;
  }

  data.targetDate = months.toString();
  ctx.tempData = data;

  await finishProfileRegistration(ctx, data);
}

async function finishProfileRegistration(ctx: CustomContext, data: ProfileData): Promise<void> {
  try {
    if (!ctx.from?.id || !data.name || !data.age || !data.gender || !data.height || !data.weight || !data.activityLevel || !data.goal) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /profile');
      return;
    }

    // Calculate BMR, TDEE and target macros
    const bmr = calculateBMR({
      age: data.age,
      gender: data.gender,
      height: data.height,
      weight: data.weight,
    });

    const tdee = calculateTDEE(bmr, data.activityLevel);
    const targetCalories = calculateTargetCalories(tdee, data.goal);
    const targetMacros = calculateTargetMacros(targetCalories, data.goal);

    // Create user profile
    const profileData: Omit<UserProfile, 'id' | 'created_at' | 'updated_at'> = {
      telegram_id: ctx.from.id,
      name: data.name,
      age: data.age,
      gender: data.gender,
      height: data.height,
      weight: data.weight,
      activity_level: data.activityLevel,
      goal: data.goal,
      target_weight: data.targetWeight,
      target_date: data.targetDate,
      bmr,
      tdee,
      target_calories: targetCalories,
      target_protein: targetMacros.protein,
      target_fat: targetMacros.fat,
      target_carbs: targetMacros.carbs,
    };

    const user = await createUserProfile(profileData);
    
    // Clear registration state
    ctx.currentStep = undefined;
    ctx.tempData = undefined;
    ctx.user = user;
    ctx.isNewUser = false;
    
    // Clear session from database
    await clearUserSession(ctx.from!.id);

    const targetText = data.targetWeight ? `\n<b>–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å:</b> ${data.targetWeight} –∫–≥ –∑–∞ ${data.targetDate} –º–µ—Å—è—Ü–µ–≤` : '';
    
    const successMessage = `
üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: ${data.name}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${data.age} –ª–µ—Ç
‚Ä¢ –ü–æ–ª: ${data.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
‚Ä¢ –†–æ—Å—Ç: ${data.height} —Å–º
‚Ä¢ –í–µ—Å: ${data.weight} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${getActivityLevelText(data.activityLevel)}
‚Ä¢ –¶–µ–ª—å: ${getGoalText(data.goal)}${targetText}

üìä <b>–¢–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã:</b>
‚Ä¢ BMR: ${bmr} –∫–∫–∞–ª
‚Ä¢ TDEE: ${tdee} –∫–∫–∞–ª
‚Ä¢ –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: ${targetCalories} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: ${targetMacros.protein}–≥
‚Ä¢ –ñ–∏—Ä—ã: ${targetMacros.fat}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${targetMacros.carbs}–≥

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! üçé
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
          [{ text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' }],
          [{ text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' }],
        ],
      },
    };

    await ctx.replyWithHTML(successMessage, keyboard);

  } catch (error) {
    console.error('Error creating profile:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /profile'
    );
  }
}

function getActivityLevelText(level: ActivityLevel): string {
  const levels = {
    sedentary: '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π',
    light: '–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    moderate: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    active: '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    very_active: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
  };
  return levels[level];
}

function getGoalText(goal: UserGoal): string {
  const goals = {
    lose: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    maintain: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
    gain: '–ù–∞–±–æ—Ä –≤–µ—Å–∞',
  };
  return goals[goal];
}
