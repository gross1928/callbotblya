import { Context } from 'telegraf';
import { addMedicalData, getMedicalDataByUser, clearUserSession, saveUserSession } from '../database/queries';
import { analyzeMedicalData, analyzeMedicalPhoto } from '../utils/openai';
import { editOrReply } from '../utils/telegram';
import type { CustomContext, MedicalData } from '../types';

/**
 * Show medical data menu
 */
export async function showMedicalMenu(ctx: CustomContext): Promise<void> {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã', callback_data: 'upload_medical' }],
        [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤', callback_data: 'medical_history' }],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    },
  };

  await editOrReply(ctx, 'üß™ <b>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã.', keyboard);
}

/**
 * Handle medical photo analysis
 */
export async function handleMedicalPhotoAnalysis(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!ctx.message || !('photo' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');
      return;
    }

    await ctx.reply('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');

    // Get the largest photo
    const photos = ctx.message.photo;
    const largestPhoto = photos[photos.length - 1];
    
    // Get file URL from Telegram
    const file = await ctx.telegram.getFile(largestPhoto.file_id);
    const imageUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${file.file_path}`;

    // Analyze medical photo
    const result = await analyzeMedicalPhoto(imageUrl);

    console.log('[handleMedicalPhotoAnalysis] Analysis result:', result.text);

    // Determine analysis type from result
    let analysisType = 'other';
    const lowerText = result.text.toLowerCase();
    if (lowerText.includes('–∫—Ä–æ–≤')) analysisType = 'blood';
    else if (lowerText.includes('–º–æ—á')) analysisType = 'urine';
    else if (lowerText.includes('–≥–æ—Ä–º–æ–Ω')) analysisType = 'hormones';

    // Save to database
    try {
      const today = new Date().toISOString().split('T')[0];
      
      await addMedicalData({
        user_id: ctx.user.id,
        type: analysisType as 'blood' | 'hormones' | 'urine' | 'other',
        date: today,
        data: { 
          source: 'photo',
          extracted_text: result.text,
          raw_data: result.data 
        },
        analysis: result.text,
        recommendations: undefined
      });

      console.log('[handleMedicalPhotoAnalysis] Medical data saved to database');
    } catch (saveError) {
      console.error('[handleMedicalPhotoAnalysis] Error saving to database:', saveError);
      // Continue to show results even if save fails
    }

    // Show extracted data
    await ctx.replyWithHTML(
      `üìã <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n${result.text}\n\n` +
      `<i>‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö".</i>`
    );

    // Clear step and session
    ctx.currentStep = undefined;
    await clearUserSession(ctx.from!.id);

  } catch (error) {
    console.error('Error analyzing medical photo:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.');
  }
}

/**
 * Handle document upload for medical data
 */
export async function handleMedicalDocumentUpload(ctx: CustomContext): Promise<void> {
  await ctx.replyWithHTML(
    'üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n' +
    '<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n' +
    '‚Ä¢ PDF —Ñ–∞–π–ª—ã —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏\n' +
    '‚Ä¢ –§–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–æ–≤ (JPG, PNG)\n' +
    '‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n' +
    '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –∏–ª–∏ <b>–æ–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–µ–∫—Å—Ç–æ–º</b>.\n\n' +
    '<i>–ü—Ä–∏–º–µ—Ä: "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏: –≥–µ–º–æ–≥–ª–æ–±–∏–Ω 140 –≥/–ª, —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã 4.5 –º–ª–Ω/–º–∫–ª"</i>'
  );
  
  ctx.currentStep = 'medical_upload';
  await saveUserSession(ctx.from!.id, 'medical_upload', {});
}

/**
 * Handle medical text input
 */
export async function handleMedicalTextInput(ctx: CustomContext, text: string): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...');

    // Parse the text to extract medical data
    const medicalData = parseMedicalText(text);
    
    if (!medicalData) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.');
      return;
    }

    // Analyze using AI
    const analysis = await analyzeMedicalData(
      medicalData.type,
      medicalData.data,
      ctx.user
    );

    // Save to database
    const entry = {
      user_id: ctx.user.id,
      type: medicalData.type as any,
      date: medicalData.date || new Date().toISOString().split('T')[0],
      data: medicalData.data,
      analysis: analysis.analysis,
      recommendations: analysis.recommendations,
    };

    await addMedicalData(entry);

    const resultText = `
üß™ <b>–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>

<b>–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:</b> ${getMedicalTypeText(medicalData.type)}
<b>–î–∞—Ç–∞:</b> ${entry.date}

<b>üìä –ê–Ω–∞–ª–∏–∑:</b>
${analysis.analysis}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
${analysis.recommendations}

‚ö†Ô∏è <i>–ü–æ–º–Ω–∏: —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑. –î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≤—Ä–∞—á—É!</i>
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ', callback_data: 'upload_medical' },
            { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'medical_history' },
          ],
          [
            { text: 'ü§ñ AI-–∫–æ—É—á', callback_data: 'ai_coach' },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(resultText, keyboard);

    ctx.currentStep = undefined;

  } catch (error) {
    console.error('Error processing medical text:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≤—Ä–∞—á—É.');
    ctx.currentStep = undefined;
  }
}

/**
 * Show medical data history
 */
export async function showMedicalHistory(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const medicalData = await getMedicalDataByUser(ctx.user.id);

    if (medicalData.length === 0) {
      await ctx.reply('üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }

    let historyText = 'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n';

    medicalData.forEach((entry, index) => {
      const date = new Date(entry.date).toLocaleDateString('ru-RU');
      historyText += `${index + 1}. <b>${getMedicalTypeText(entry.type)}</b> - ${date}\n`;
      
      if (entry.analysis) {
        const shortAnalysis = entry.analysis.length > 100 
          ? entry.analysis.substring(0, 100) + '...'
          : entry.analysis;
        historyText += `   ${shortAnalysis}\n`;
      }
      historyText += '\n';
    });

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ', callback_data: 'upload_medical' },
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(historyText, keyboard);

  } catch (error) {
    console.error('Error showing medical history:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
  }
}

/**
 * Show detailed medical data
 */
export async function showMedicalData(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const medicalData = await getMedicalDataByUser(ctx.user.id);

    if (medicalData.length === 0) {
      await ctx.reply('üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }

    // Show the most recent entry
    const latestEntry = medicalData[0];
    const date = new Date(latestEntry.date).toLocaleDateString('ru-RU');

    // Limit text length to avoid Telegram's 4096 character limit
    const maxLength = 3800; // Leave some room for formatting
    let analysisText = latestEntry.analysis || '';
    let dataJsonText = JSON.stringify(latestEntry.data, null, 2);
    
    // If analysis is too long, truncate it
    if (analysisText.length > 2000) {
      analysisText = analysisText.substring(0, 2000) + '\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)';
    }
    
    // If data JSON is too long, truncate it
    if (dataJsonText.length > 500) {
      dataJsonText = dataJsonText.substring(0, 500) + '\n... (–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã)';
    }

    let dataText = `
üß™ <b>${getMedicalTypeText(latestEntry.type)}</b>
üìÖ ${date}

<b>üìä –î–∞–Ω–Ω—ã–µ:</b>
${dataJsonText}

${analysisText ? `\n<b>üîç –ê–Ω–∞–ª–∏–∑:</b>\n${analysisText}` : ''}

${latestEntry.recommendations ? `\n<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n${latestEntry.recommendations}` : ''}
    `;
    
    // Final safety check - ensure message is not too long
    if (dataText.length > maxLength) {
      dataText = dataText.substring(0, maxLength) + '\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)';
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'medical_history' },
            { text: 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ', callback_data: 'upload_medical' },
          ],
          [
            { text: 'ü§ñ AI-–∫–æ—É—á', callback_data: 'ai_coach' },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(dataText, keyboard);

  } catch (error) {
    console.error('Error showing medical data:', error);
    
    // Report error to Telegram notifications
    const { captureException } = await import('../utils/sentry');
    captureException(error as Error, {
      user: ctx.user,
      context: 'show_medical_data',
      telegramId: ctx.from?.id,
    });
    
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.');
  }
}

/**
 * Parse medical text to extract structured data
 */
function parseMedicalText(text: string): { type: string; date?: string; data: any } | null {
  const lowerText = text.toLowerCase();

  // Determine type based on keywords
  let type = 'other';
  if (lowerText.includes('–∫—Ä–æ–≤') || lowerText.includes('–≥–µ–º–æ–≥–ª–æ–±–∏–Ω') || lowerText.includes('—ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç')) {
    type = 'blood';
  } else if (lowerText.includes('–≥–æ—Ä–º–æ–Ω') || lowerText.includes('—Ç–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π') || lowerText.includes('—Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω')) {
    type = 'hormones';
  } else if (lowerText.includes('–º–æ—á–∞') || lowerText.includes('—É—Ä–∏–Ω–∞') || lowerText.includes('–±–µ–ª–æ–∫ –≤ –º–æ—á–µ')) {
    type = 'urine';
  }

  // Extract date if present
  const dateMatch = text.match(/(\d{1,2}[./]\d{1,2}[./]\d{2,4})/);
  const date = dateMatch ? dateMatch[1] : undefined;

  // For now, store the raw text as data
  // In a real implementation, you would parse specific values
  const data = {
    raw_text: text,
    extracted_values: extractMedicalValues(text),
  };

  return { type, date, data };
}

/**
 * Extract medical values from text
 */
function extractMedicalValues(text: string): Record<string, any> {
  const values: Record<string, any> = {};
  
  // Simple regex patterns for common medical values
  const patterns = [
    { key: 'hemoglobin', pattern: /–≥–µ–º–æ–≥–ª–æ–±–∏–Ω[:\s]*(\d+\.?\d*)\s*–≥\/–ª/i },
    { key: 'erythrocytes', pattern: /—ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã[:\s]*(\d+\.?\d*)\s*–º–ª–Ω\/–º–∫–ª/i },
    { key: 'leukocytes', pattern: /–ª–µ–π–∫–æ—Ü–∏—Ç—ã[:\s]*(\d+\.?\d*)\s*—Ç—ã—Å\/–º–∫–ª/i },
    { key: 'platelets', pattern: /—Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã[:\s]*(\d+\.?\d*)\s*—Ç—ã—Å\/–º–∫–ª/i },
    { key: 'glucose', pattern: /–≥–ª—é–∫–æ–∑–∞[:\s]*(\d+\.?\d*)\s*–º–º–æ–ª—å\/–ª/i },
    { key: 'cholesterol', pattern: /—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω[:\s]*(\d+\.?\d*)\s*–º–º–æ–ª—å\/–ª/i },
  ];

  patterns.forEach(({ key, pattern }) => {
    const match = text.match(pattern);
    if (match) {
      values[key] = parseFloat(match[1]);
    }
  });

  return values;
}

/**
 * Get medical type text in Russian
 */
function getMedicalTypeText(type: string): string {
  const types = {
    blood: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
    hormones: '–ê–Ω–∞–ª–∏–∑ –Ω–∞ –≥–æ—Ä–º–æ–Ω—ã',
    urine: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏',
    other: '–î—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏–∑—ã',
  };
  return types[type as keyof typeof types] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
}
