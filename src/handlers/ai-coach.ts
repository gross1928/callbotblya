import { Context } from 'telegraf';
import { getAICoachResponse } from '../utils/openai';
import { addChatMessage, getChatHistory } from '../database/queries';
import type { CustomContext } from '../types';

/**
 * Handle AI coach messages
 */
export async function handleAICoachMessage(ctx: CustomContext, message: string): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!message || message.trim().length < 2) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.');
      return;
    }

    // Show typing indicator
    await ctx.sendChatAction('typing');

    // Save user message to database
    await addChatMessage({
      user_id: ctx.user.id,
      role: 'user',
      content: message.trim(),
      timestamp: new Date().toISOString(),
    });

    // Get chat history for context
    const chatHistory = await getChatHistory(ctx.user.id, 10);

    // Get AI response
    const aiResponse = await getAICoachResponse(message.trim(), ctx.user, chatHistory);

    // Save AI response to database
    await addChatMessage({
      user_id: ctx.user.id,
      role: 'assistant',
      content: aiResponse,
      timestamp: new Date().toISOString(),
    });

    // Send response with action buttons
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
            { text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' },
          ],
          [
            { text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.reply(aiResponse, keyboard);

  } catch (error) {
    console.error('Error handling AI coach message:', error);
    await ctx.reply(
      '–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.'
    );
  }
}

/**
 * Start AI coach conversation
 */
export async function startAICoach(ctx: CustomContext): Promise<void> {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const welcomeMessage = `
ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–∫–æ—É—á –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –∑–¥–æ—Ä–æ–≤—å—é!</b>

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å:
üçé –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –¥–∏–µ—Ç–µ
üí™ –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
üèÉ‚Äç‚ôÇÔ∏è –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
üìä –ê–Ω–∞–ª–∏–∑–æ–º —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
üß† –õ—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ

–Ø –∑–Ω–∞—é —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –º–æ–≥—É –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö.
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'ai_questions' },
          ],
          [
            { text: 'üìä –ú–æ–π –¥–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' },
            { text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' },
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
          ],
        ],
      },
    };

    await ctx.replyWithHTML(welcomeMessage, keyboard);
    ctx.currentStep = 'ai_coach';

  } catch (error) {
    console.error('Error starting AI coach:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å AI-–∫–æ—É—á–∞.');
  }
}

/**
 * Show popular questions for AI coach
 */
export async function showPopularQuestions(ctx: CustomContext): Promise<void> {
  const questionsText = `
üí° <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

<b>–û –ø–∏—Ç–∞–Ω–∏–∏:</b>
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å?"
‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –±–µ–ª–∫–∞ –º–Ω–µ –Ω—É–∂–Ω–æ?"
‚Ä¢ "–ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º?"

<b>–û –ø–æ—Ö—É–¥–µ–Ω–∏–∏:</b>
‚Ä¢ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π?"
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –ø–æ—Ö—É–¥–µ—Ç—å?"
‚Ä¢ "–ö–∞–∫ –Ω–µ —Å–æ—Ä–≤–∞—Ç—å—Å—è —Å –¥–∏–µ—Ç—ã?"
‚Ä¢ "–ü–æ—á–µ–º—É –≤–µ—Å —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ?"

<b>–û –Ω–∞–±–æ—Ä–µ –≤–µ—Å–∞:</b>
‚Ä¢ "–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É?"
‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?"
‚Ä¢ "–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–ø–ø–µ—Ç–∏—Ç?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–±–∞–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?"

<b>–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å?"
‚Ä¢ "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è?"
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø–µ—Ä–µ–µ–ª?"

–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π!
  `;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', callback_data: 'ai_coach' }],
        [{ text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    },
  };

  await ctx.replyWithHTML(questionsText, keyboard);
}

/**
 * Show AI coach tips
 */
export async function showAITips(ctx: CustomContext): Promise<void> {
  const tipsText = `
üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI-–∫–æ—É—á–∞:</b>

<b>–ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚úÖ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ—é –Ω–æ—Ä–º—É –±–µ–ª–∫–∞?"
‚ùå "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–µ–ª–æ–∫"

<b>–£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:</b>
‚úÖ "–Ø —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –∫–∞–∫ –ø–∏—Ç–∞—Ç—å—Å—è?"
‚ùå "–ö–∞–∫ –ø–∏—Ç–∞—Ç—å—Å—è?"

<b>–ü—Ä–æ—Å–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>
‚úÖ "–£—á–∏—Ç—ã–≤–∞—è –º–æ–π –≤–µ—Å 70–∫–≥, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –º–Ω–µ –Ω—É–∂–Ω–æ?"
‚ùå "–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω—É–∂–Ω–æ?"

<b>–ó–∞–¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É–∂–∏–Ω?"
‚Ä¢ "–ö–∞–∫ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å –≤ –æ—Ñ–∏—Å–µ?"
‚Ä¢ "–ß—Ç–æ –≤–∑—è—Ç—å –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª?"

<b>–ü–æ–º–Ω–∏:</b> –Ø –∑–Ω–∞—é —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –º–æ–≥—É –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!
  `;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ai_coach' }],
        [{ text: 'üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'ai_questions' }],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    },
  };

  await ctx.replyWithHTML(tipsText, keyboard);
}
