import { db } from '../database/client';
import { bot } from '../bot';

/**
 * Check all users for expired subscriptions and send notifications
 * This should be called periodically (e.g., once per day via cron)
 */
export async function checkExpiredSubscriptions(): Promise<void> {
  try {
    console.log('[Subscription Checker] Starting subscription check...');

    const now = new Date();

    // Get all users with trial or active subscriptions
    const { data: users, error } = await db
      .from('user_profiles')
      .select('telegram_id, subscription_status, trial_end_date, subscription_end_date')
      .in('subscription_status', ['trial', 'active']);

    if (error) {
      console.error('[Subscription Checker] Error fetching users:', error);
      return;
    }

    if (!users || users.length === 0) {
      console.log('[Subscription Checker] No users to check');
      return;
    }

    console.log(`[Subscription Checker] Checking ${users.length} users...`);

    let expiredCount = 0;
    let notifiedCount = 0;

    for (const user of users) {
      try {
        // Check trial expiration
        if (user.subscription_status === 'trial' && user.trial_end_date) {
          const trialEnd = new Date(user.trial_end_date);
          
          // If trial expired
          if (now > trialEnd) {
            await updateUserSubscriptionStatus(user.telegram_id, 'expired');
            await sendTrialExpiredNotification(user.telegram_id);
            expiredCount++;
          }
          // If trial expires in 1 day
          else {
            const hoursRemaining = (trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60);
            if (hoursRemaining <= 24 && hoursRemaining > 0) {
              await sendTrialExpiringNotification(user.telegram_id, trialEnd);
              notifiedCount++;
            }
          }
        }

        // Check subscription expiration
        if (user.subscription_status === 'active' && user.subscription_end_date) {
          const subEnd = new Date(user.subscription_end_date);
          
          // If subscription expired
          if (now > subEnd) {
            await updateUserSubscriptionStatus(user.telegram_id, 'expired');
            await sendSubscriptionExpiredNotification(user.telegram_id);
            expiredCount++;
          }
          // If subscription expires in 1 day
          else {
            const hoursRemaining = (subEnd.getTime() - now.getTime()) / (1000 * 60 * 60);
            if (hoursRemaining <= 24 && hoursRemaining > 0) {
              await sendSubscriptionExpiringNotification(user.telegram_id, subEnd);
              notifiedCount++;
            }
          }
        }
      } catch (userError) {
        console.error(`[Subscription Checker] Error processing user ${user.telegram_id}:`, userError);
      }
    }

    console.log(`[Subscription Checker] Check complete: ${expiredCount} expired, ${notifiedCount} notified`);

  } catch (error) {
    console.error('[Subscription Checker] Fatal error:', error);
  }
}

/**
 * Update user subscription status in database
 */
async function updateUserSubscriptionStatus(telegramId: number, status: 'expired'): Promise<void> {
  const { error } = await db
    .from('user_profiles')
    .update({ subscription_status: status })
    .eq('telegram_id', telegramId);

  if (error) {
    console.error(`[Subscription Checker] Error updating status for user ${telegramId}:`, error);
  }
}

/**
 * Send notification when trial is about to expire (24 hours)
 */
async function sendTrialExpiringNotification(telegramId: number, expiryDate: Date): Promise<void> {
  try {
    const message = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–∏–∞–ª–µ</b>

–í–∞—à —Ç—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (${expiryDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })})!

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü

–ù–∞–∂–º–∏—Ç–µ /subscription —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    `.trim();

    await bot.telegram.sendMessage(telegramId, message, { parse_mode: 'HTML' });
    console.log(`[Subscription Checker] Trial expiring notification sent to ${telegramId}`);
  } catch (error) {
    console.error(`[Subscription Checker] Error sending trial expiring notification to ${telegramId}:`, error);
  }
}

/**
 * Send notification when trial has expired
 */
async function sendTrialExpiredNotification(telegramId: number): Promise<void> {
  try {
    const message = `
‚è∞ <b>–¢—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫</b>

–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª-–ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

<b>üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ üçé –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ü§ñ AI-–∫–æ—É—á —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ üß™ –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü

–ù–∞–∂–º–∏—Ç–µ /subscription —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    `.trim();

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }],
        ],
      },
    };

    await bot.telegram.sendMessage(telegramId, message, { parse_mode: 'HTML', ...keyboard });
    console.log(`[Subscription Checker] Trial expired notification sent to ${telegramId}`);
  } catch (error) {
    console.error(`[Subscription Checker] Error sending trial expired notification to ${telegramId}:`, error);
  }
}

/**
 * Send notification when subscription is about to expire (24 hours)
 */
async function sendSubscriptionExpiringNotification(telegramId: number, expiryDate: Date): Promise<void> {
  try {
    const message = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (${expiryDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })})!

–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü

–ù–∞–∂–º–∏—Ç–µ /subscription —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    `.trim();

    await bot.telegram.sendMessage(telegramId, message, { parse_mode: 'HTML' });
    console.log(`[Subscription Checker] Subscription expiring notification sent to ${telegramId}`);
  } catch (error) {
    console.error(`[Subscription Checker] Error sending subscription expiring notification to ${telegramId}:`, error);
  }
}

/**
 * Send notification when subscription has expired
 */
async function sendSubscriptionExpiredNotification(telegramId: number): Promise<void> {
  try {
    const message = `
‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.

–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.

<b>üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ üçé –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ü§ñ AI-–∫–æ—É—á —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ üß™ –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ/–º–µ—Å—è—Ü

–ù–∞–∂–º–∏—Ç–µ /subscription —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
    `.trim();

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription' }],
        ],
      },
    };

    await bot.telegram.sendMessage(telegramId, message, { parse_mode: 'HTML', ...keyboard });
    console.log(`[Subscription Checker] Subscription expired notification sent to ${telegramId}`);
  } catch (error) {
    console.error(`[Subscription Checker] Error sending subscription expired notification to ${telegramId}:`, error);
  }
}

/**
 * Start periodic subscription checking (every 12 hours)
 */
export function startSubscriptionChecker(): void {
  console.log('[Subscription Checker] Starting periodic checker...');
  
  // Run immediately on startup
  checkExpiredSubscriptions();
  
  // Run every 12 hours (12 * 60 * 60 * 1000 = 43200000 ms)
  setInterval(checkExpiredSubscriptions, 12 * 60 * 60 * 1000);
  
  console.log('[Subscription Checker] Periodic checker started (runs every 12 hours)');
}
