import { Telegraf, Context } from 'telegraf';
import { config, validateConfig } from '../config';
import { getUserByTelegramId, getUserSession, saveUserSession, clearUserSession } from '../database/queries';
import { getUserProduct } from '../database/products-queries';
import { handleProfileStep, handleGenderCallback, handleActivityCallback, handleGoalCallback } from '../handlers/profile';
import { handleFoodPhotoAnalysis, handleFoodTextAnalysis, saveFoodEntry, saveFoodEntryById, handleFoodEdit, handleFoodEditById, showFoodHistory } from '../handlers/food';
import { showDashboard, showNutritionBreakdown } from '../handlers/dashboard';
import { addWater, showWaterMenu, showWaterHistory } from '../handlers/water';
import { handleAICoachMessage, startAICoach, showPopularQuestions, showAITips } from '../handlers/ai-coach';
import { showMedicalMenu, handleMedicalDocumentUpload, handleMedicalTextInput, showMedicalHistory, showMedicalData, handleMedicalPhotoAnalysis } from '../handlers/medical';
import {
  showUserProductsMenu,
  showProductDetails,
  handleAddProductStart,
  handleAddProductName,
  handleAddProductComplete,
  handleDeleteProduct,
  parseKBZHU,
  createFoodAnalysisFromProduct,
} from '../handlers/products';
import { editOrReply } from '../utils/telegram';
import type { BotContext } from '../types';

// Extend Telegraf context with our custom properties
interface CustomContext extends Context {
  user?: any;
  isNewUser: boolean;
  currentStep?: string;
  tempData?: Record<string, any>;
  foodAnalyses?: Map<string, any>;
}

// Create bot instance
const bot = new Telegraf<CustomContext>(config.telegram.token);

// Middleware to load user data and session
bot.use(async (ctx: CustomContext, next: () => Promise<void>) => {
  const telegramId = ctx.from?.id;
  
  if (!telegramId) {
    return next();
  }

  try {
    // Load user profile
    const user = await getUserByTelegramId(telegramId);
    ctx.user = user || undefined;
    ctx.isNewUser = !user;
    
    // Load session state from database
    const session = await getUserSession(telegramId);
    console.log(`[Middleware] RAW session object:`, JSON.stringify(session, null, 2));
    console.log(`[Middleware] Loaded session for ${telegramId}:`, {
      currentStep: session?.currentStep,
      tempDataKeys: session?.tempData ? Object.keys(session.tempData) : 'undefined',
      tempDataType: typeof session?.tempData,
      tempDataIsNull: session?.tempData === null,
      tempDataIsUndefined: session?.tempData === undefined
    });
    if (session) {
      ctx.currentStep = session.currentStep;
      ctx.tempData = session.tempData || {};
      console.log(`[Middleware] Session found, tempData keys:`, Object.keys(ctx.tempData || {}));
      console.log(`[Middleware] Session found, tempData:`, JSON.stringify(ctx.tempData));
    } else {
      ctx.currentStep = undefined;
      ctx.tempData = {};
      console.log(`[Middleware] No session found, initialized empty tempData`);
    }
    console.log(`[Middleware] ctx.tempData keys after loading:`, Object.keys(ctx.tempData || {}));
    
    // Initialize food analyses storage and load from database
    ctx.foodAnalyses = new Map();
    if (ctx.tempData) {
      // Load food analyses from tempData
      const tempDataEntries = Object.entries(ctx.tempData);
      console.log(`[Middleware] tempData entries count:`, tempDataEntries.length);
      for (const [key, value] of tempDataEntries) {
        console.log(`[Middleware] Processing tempData key:`, key, `starts with food_:`, key.startsWith('food_'));
        if (key.startsWith('food_')) {
          ctx.foodAnalyses.set(key, value);
          console.log(`[Middleware] Loaded food analysis ${key} into ctx.foodAnalyses`);
        }
      }
    }
    console.log(`[Middleware] ctx.foodAnalyses size:`, ctx.foodAnalyses.size);
  } catch (error) {
    console.error('Error loading user and session:', error);
    ctx.currentStep = undefined;
    ctx.tempData = {};
  }

  return next();
});

// Start command
bot.start(async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply(
      'üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–î–∞–ï–¥–∞"!\n\n' +
      '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ, –∫–∞–ª–æ—Ä–∏–∏, –≤–æ–¥—É –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–∂–º–∏ /profile —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
    );
  } else {
    await showMainMenu(ctx);
  }
});

// Profile command
bot.command('profile', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await startProfileRegistration(ctx);
  } else {
    await showProfile(ctx);
  }
});

// Dashboard command
bot.command('dashboard', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }
  
  await clearUserSession(ctx.from!.id);
  ctx.currentStep = undefined;
  await showDashboard(ctx);
});

// Food tracking command
bot.command('food', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }
  
  await clearUserSession(ctx.from!.id);
  ctx.currentStep = undefined;
  await showFoodMenu(ctx);
});

// Water tracking command
bot.command('water', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }
  
  await clearUserSession(ctx.from!.id);
  ctx.currentStep = undefined;
  await showWaterMenu(ctx);
});

// AI Coach command
bot.command('coach', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }
  
  // AI coach will set its own step
  await startAICoach(ctx);
});

// Medical data command
bot.command('medical', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }
  
  await clearUserSession(ctx.from!.id);
  ctx.currentStep = undefined;
  await showMedicalMenu(ctx);
});

// Help command
bot.help(async (ctx: CustomContext) => {
  const helpText = `
üçé <b>–î–∞–ï–¥–∞ - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é</b>

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) –∏–ª–∏ /start
2. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é
3. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üìä <b>–î–∞—à–±–æ—Ä–¥</b> - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
üçé <b>–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É</b> - —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
üíß <b>–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
ü§ñ <b>AI-–∫–æ—É—á</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
üß™ <b>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b> - —Ö—Ä–∞–Ω–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–Ω–∞–ª–∏–∑—ã
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–ª–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
üì∑ –§–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üìÑ PDF –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏:
üë§ @grossvn
  `;

  await ctx.replyWithHTML(helpText);
});

// Handle photo uploads for food analysis
bot.on('photo', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }

  // Check if user is uploading medical data
  if (ctx.currentStep === 'medical_upload') {
    await handleMedicalPhotoAnalysis(ctx);
    return;
  }

  // Check if user is in food photo mode
  if (ctx.currentStep === 'food_photo') {
    await handleFoodPhotoInput(ctx);
  } else {
    await handleFoodPhotoAnalysis(ctx);
  }
});

// Handle document uploads (for medical data)
bot.on('document', async (ctx: CustomContext) => {
  if (ctx.isNewUser) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
    return;
  }

  await handleDocumentUpload(ctx);
});

// Handle text messages during registration
bot.on('text', async (ctx: CustomContext) => {
  console.log('Text message received:', { 
    currentStep: ctx.currentStep, 
    hasTempData: !!ctx.tempData,
    text: (ctx.message as any)?.text?.substring(0, 50) 
  });
  
  const text = (ctx.message as any)?.text || '';

  // Handle products reply keyboard buttons
  if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç') {
    try {
      const { text: responseText, keyboard } = await handleAddProductStart();
      ctx.currentStep = 'add_product_name';
      ctx.tempData = {};
      await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
      await ctx.reply(responseText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error starting add product:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  if (text === '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –µ–¥—ã') {
    await clearUserSession(ctx.from!.id);
    ctx.currentStep = undefined;
    await showFoodMenu(ctx);
    return;
  }

  if (text === '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º') {
    await clearUserSession(ctx.from!.id);
    ctx.currentStep = undefined;
    try {
      const { text: menuText, keyboard } = await showUserProductsMenu(ctx.from!.id, 0);
      await ctx.reply(menuText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error showing products menu:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    }
    return;
  }

  // Handle pagination buttons
  if (text === '‚¨ÖÔ∏è' || text === '‚û°Ô∏è') {
    // Get current page from context (if stored) or assume 0
    const currentPage = ctx.tempData?.productsPage || 0;
    const newPage = text === '‚¨ÖÔ∏è' ? Math.max(0, currentPage - 1) : currentPage + 1;
    
    try {
      const { text: menuText, keyboard } = await showUserProductsMenu(ctx.from!.id, newPage);
      ctx.tempData = { ...ctx.tempData, productsPage: newPage };
      await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
      await ctx.reply(menuText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error changing products page:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    }
    return;
  }

  // Handle product selection from reply keyboard (buttons like "üçΩ –°—ã—Ä")
  if (text.startsWith('üçΩ ')) {
    const productName = text.replace('üçΩ ', '');
    
    try {
      // Find product by name
      const { getUserProductsPaginated } = await import('../database/products-queries');
      const { products } = await getUserProductsPaginated(ctx.from!.id, 0, 100);
      const product = products.find(p => p.name === productName);
      
      if (product) {
        const { text: detailText, keyboard } = await showProductDetails(ctx.from!.id, product.id);
        ctx.currentStep = `product_weight_${product.id}`;
        ctx.tempData = { productId: product.id };
        await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
        await ctx.reply(detailText, { parse_mode: 'HTML', ...keyboard });
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('Error handling product selection:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }
  
  // If user is in registration process, handle profile step
  if (ctx.currentStep && (ctx.currentStep.startsWith('name') || 
      ctx.currentStep === 'age' || 
      ctx.currentStep === 'height' || 
      ctx.currentStep === 'weight' || 
      ctx.currentStep === 'target_weight' || 
      ctx.currentStep === 'target_date')) {
    await handleProfileStep(ctx, text);
    return;
  }

  // Handle add product - name input
  if (ctx.currentStep === 'add_product_name') {
    const text = (ctx.message as any)?.text || '';
    if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }
    try {
      const { text: responseText, keyboard } = await handleAddProductName(text);
      ctx.currentStep = 'add_product_kbzhu';
      ctx.tempData = { productName: text };
      await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
      await ctx.reply(responseText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error handling product name:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  // Handle add product - KBZHU input
  if (ctx.currentStep === 'add_product_kbzhu') {
    const text = (ctx.message as any)?.text || '';
    if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    const kbzhu = parseKBZHU(text);
    if (!kbzhu) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n' +
        '–í–≤–µ–¥–∏ –ö–ë–ñ–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '<code>–∫–∞–ª–æ—Ä–∏–∏\n–±–µ–ª–∫–∏\n–∂–∏—Ä—ã\n—É–≥–ª–µ–≤–æ–¥—ã</code>\n\n' +
        '–ü—Ä–∏–º–µ—Ä:\n' +
        '<code>220\n13\n5\n21</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }

    try {
      const productName = ctx.tempData?.productName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç';
      const { text: responseText, keyboard } = await handleAddProductComplete(
        ctx.from!.id,
        productName,
        kbzhu
      );
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await ctx.reply(responseText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error completing add product:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  // Handle product weight input
  if (ctx.currentStep?.startsWith('product_weight_')) {
    const text = (ctx.message as any)?.text || '';
    
    // Handle quick weight buttons
    let weightGrams = 0;
    if (text.match(/^\d+–≥$/)) {
      weightGrams = parseInt(text.replace('–≥', ''));
    } else if (text === '‚óÄÔ∏è –ö –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º') {
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      const { text: menuText, keyboard } = await showUserProductsMenu(ctx.from!.id, 0);
      await ctx.reply(menuText, { parse_mode: 'HTML', ...keyboard });
      return;
    } else if (text === '‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç') {
      const productId = ctx.tempData?.productId;
      if (productId) {
        try {
          await handleDeleteProduct(ctx.from!.id, productId);
          await ctx.reply('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!');
          const { text: menuText, keyboard } = await showUserProductsMenu(ctx.from!.id, 0);
          await ctx.reply(menuText, { parse_mode: 'HTML', ...keyboard });
        } catch (error) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
        }
      }
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      return;
    } else {
      weightGrams = parseInt(text);
    }

    if (!weightGrams || weightGrams <= 0) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)');
      return;
    }

    const productId = ctx.tempData?.productId;
    if (!productId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      return;
    }

    try {
      const product = await getUserProduct(ctx.from!.id, productId);
      if (!product) {
        await ctx.reply('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await clearUserSession(ctx.from!.id);
        ctx.currentStep = undefined;
        return;
      }

      const foodAnalysis = createFoodAnalysisFromProduct(product, weightGrams);
      
      // Save to session like regular food analysis
      const analysisId = `product_${Date.now()}`;
      ctx.tempData = { ...ctx.tempData, [analysisId]: foodAnalysis };
      await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
      
      // Show meal type selection
      const analysisText = `
üçé <b>–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>

<b>–ë–ª—é–¥–æ:</b> ${foodAnalysis.name}
<b>–í–µ—Å:</b> ${foodAnalysis.weight}–≥

<b>–ö–ë–ñ–£:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${foodAnalysis.calories} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: ${foodAnalysis.protein}–≥ | –ñ–∏—Ä—ã: ${foodAnalysis.fat}–≥ | –£–≥–ª–µ–≤–æ–¥—ã: ${foodAnalysis.carbs}–≥

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏?
      `;

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫', callback_data: `save_food_breakfast_${analysisId}` },
              { text: 'üåû –û–±–µ–¥', callback_data: `save_food_lunch_${analysisId}` },
            ],
            [
              { text: 'üåô –£–∂–∏–Ω', callback_data: `save_food_dinner_${analysisId}` },
              { text: 'üçø –ü–µ—Ä–µ–∫—É—Å', callback_data: `save_food_snack_${analysisId}` },
            ],
            [
              { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_food_${analysisId}` },
            ],
            [
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_food' },
            ],
          ],
        },
      };

      await ctx.reply(analysisText, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error handling product weight:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  // Handle AI coach messages
  if (ctx.currentStep === 'ai_coach') {
    const text = (ctx.message as any)?.text || '';
    await handleAICoachMessageWrapper(ctx, text);
    return;
  }

  // Handle food text input
  if (ctx.currentStep === 'food_text') {
    const text = (ctx.message as any)?.text || '';
    await handleFoodTextInput(ctx, text);
    return;
  }

  // Handle medical text input
  if (ctx.currentStep === 'medical_upload') {
    const text = (ctx.message as any)?.text || '';
    await handleMedicalTextInput(ctx, text);
    return;
  }

  // Handle all other text messages as AI coach questions
  // (when no specific step is active)
  if (!ctx.currentStep) {
    const text = (ctx.message as any)?.text || '';
    if (text && text.trim().length > 0) {
      console.log('[Text Handler] Forwarding message to AI coach:', text.substring(0, 50));
      await handleAICoachMessageWrapper(ctx, text);
      return;
    }
  }

  // If we get here, unknown message type
  console.log('[Text Handler] Unknown message type, currentStep:', ctx.currentStep);
});

// Handle callback queries (button presses)
bot.on('callback_query', async (ctx: CustomContext) => {
  const callbackData = (ctx.callbackQuery as any)?.data;
  
  if (!callbackData) return;

  try {
    await handleCallbackQuery(ctx, callbackData);
  } catch (error) {
    console.error('Error handling callback query:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
});

// Placeholder functions (to be implemented)
async function showMainMenu(ctx: CustomContext) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìä –î–∞—à–±–æ—Ä–¥', callback_data: 'dashboard' }],
        [{ text: 'üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', callback_data: 'add_food' }],
        [{ text: 'üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É', callback_data: 'add_water' }],
        [{ text: 'ü§ñ AI-–∫–æ—É—á', callback_data: 'ai_coach' }],
        [{ text: 'üß™ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', callback_data: 'medical' }],
        [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
      ],
    },
  };

  await editOrReply(ctx, '<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', keyboard);
}

async function startProfileRegistration(ctx: CustomContext) {
  await ctx.reply(
    'üë§ –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n' +
    '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –º–Ω–µ –Ω—É–∂–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n' +
    '–ù–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
  );
  
  ctx.currentStep = 'name';
  ctx.tempData = {};
  
  // Save session to database
  await saveUserSession(ctx.from!.id, 'name', {});
}

async function showProfile(ctx: CustomContext) {
  if (!ctx.user) return;
  
  const profile = ctx.user;
  const text = `
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–ò–º—è:</b> ${profile.name}
<b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${profile.age} –ª–µ—Ç
<b>–ü–æ–ª:</b> ${profile.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
<b>–†–æ—Å—Ç:</b> ${profile.height} —Å–º
<b>–í–µ—Å:</b> ${profile.weight} –∫–≥
<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> ${getActivityLevelText(profile.activity_level)}
<b>–¶–µ–ª—å:</b> ${getGoalText(profile.goal)}

üéØ <b>–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${profile.target_calories} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: ${profile.target_protein}–≥ | –ñ–∏—Ä—ã: ${profile.target_fat}–≥ | –£–≥–ª–µ–≤–æ–¥—ã: ${profile.target_carbs}–≥
  `;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
      ],
    },
  };

  await editOrReply(ctx, text, keyboard);
}

async function showDashboardHandler(ctx: CustomContext) {
  await showDashboard(ctx);
}

async function showFoodMenu(ctx: CustomContext) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üì∑ –§–æ—Ç–æ –µ–¥—ã', callback_data: 'food_photo' }],
        [{ text: '‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'food_text' }],
        [{ text: 'üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'user_products' }],
        [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏', callback_data: 'food_history' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
      ],
    },
  };

  await editOrReply(ctx, '<b>üçé –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã:</b>', keyboard);
}

async function showWaterMenuHandler(ctx: CustomContext) {
  await showWaterMenu(ctx);
}

async function startAICoachHandler(ctx: CustomContext) {
  await startAICoach(ctx);
}

async function showMedicalMenuHandler(ctx: CustomContext) {
  await showMedicalMenu(ctx);
}

async function handleFoodPhoto(ctx: CustomContext) {
  await handleFoodPhotoAnalysis(ctx);
}

async function handleDocumentUpload(ctx: CustomContext) {
  await ctx.reply('üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç... (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

// Handle AI coach messages
async function handleAICoachMessageWrapper(ctx: CustomContext, message: string): Promise<void> {
  await handleAICoachMessage(ctx, message);
}

// Handle food text input
async function handleFoodTextInput(ctx: CustomContext, text: string): Promise<void> {
  await handleFoodTextAnalysis(ctx, text);
  // Don't clear session here! We need the tempData for when user clicks meal type button
  // Session will be cleared after successful save in saveFoodEntryById
}

// Handle food photo input
async function handleFoodPhotoInput(ctx: CustomContext): Promise<void> {
  await handleFoodPhotoAnalysis(ctx);
  // Don't clear session here! We need the tempData for when user clicks meal type button
  // Session will be cleared after successful save in saveFoodEntryById
}

async function handleCallbackQuery(ctx: CustomContext, data: string) {
  await ctx.answerCbQuery();

  // Handle profile registration callbacks
  if (data.startsWith('gender_')) {
    const gender = data.split('_')[1] as 'male' | 'female';
    await handleGenderCallback(ctx, gender);
    return;
  }

  if (data.startsWith('activity_')) {
    const activityKey = data.split('_')[1];
    await handleActivityCallback(ctx, activityKey);
    return;
  }

  if (data.startsWith('goal_')) {
    const goalKey = data.split('_')[1];
    await handleGoalCallback(ctx, goalKey);
    return;
  }

  // Handle food saving callbacks
  if (data.startsWith('save_food_')) {
    const parts = data.split('_');
    const mealType = parts[2] as any;
    const analysisId = parts.slice(3).join('_');
    try {
      await saveFoodEntryById(ctx, mealType, analysisId);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –µ–¥—ã');
    }
    return;
  }

  // Handle food editing
  if (data.startsWith('edit_food_')) {
    const analysisId = data.replace('edit_food_', '');
    try {
      await handleFoodEditById(ctx, analysisId);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–¥—ã');
    }
    return;
  }

  // Handle cancel food
  if (data === 'cancel_food') {
    await clearUserSession(ctx.from!.id);
    await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
    ctx.currentStep = undefined;
    return;
  }

  // Handle food history
  if (data === 'food_history') {
    await clearUserSession(ctx.from!.id);
    ctx.currentStep = undefined;
    await showFoodHistory(ctx);
    return;
  }

  // Handle user products
  if (data === 'user_products' || data.startsWith('products_page_')) {
    const page = data.startsWith('products_page_') ? parseInt(data.split('_')[2]) : 0;
    await clearUserSession(ctx.from!.id);
    ctx.currentStep = undefined;
    try {
      const { text, keyboard } = await showUserProductsMenu(ctx.from!.id, page);
      await ctx.editMessageText(text, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error showing products menu:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    }
    return;
  }

  // Handle product selection
  if (data.startsWith('product_')) {
    const productId = parseInt(data.split('_')[1]);
    try {
      const { text, keyboard } = await showProductDetails(ctx.from!.id, productId);
      ctx.currentStep = `product_weight_${productId}`;
      ctx.tempData = { productId };
      await saveUserSession(ctx.from!.id, ctx.currentStep, ctx.tempData);
      await ctx.editMessageText(text, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error showing product details:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  // Handle delete product
  if (data.startsWith('delete_product_')) {
    const productId = parseInt(data.split('_')[2]);
    try {
      await handleDeleteProduct(ctx.from!.id, productId);
      await ctx.reply('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!');
      const { text, keyboard } = await showUserProductsMenu(ctx.from!.id, 0);
      await ctx.reply(text, { parse_mode: 'HTML', ...keyboard });
    } catch (error) {
      console.error('Error deleting product:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    return;
  }

  switch (data) {
    case 'main_menu':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showMainMenu(ctx);
      break;
    case 'dashboard':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showDashboardHandler(ctx);
      break;
    case 'add_food':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showFoodMenu(ctx);
      break;
    case 'add_water':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showWaterMenuHandler(ctx);
      break;
    case 'ai_coach':
      // AI coach will set its own step
      await startAICoachHandler(ctx);
      break;
    case 'medical':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showMedicalMenuHandler(ctx);
      break;
    case 'profile':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showProfile(ctx);
      break;
    case 'edit_profile':
      await startProfileRegistration(ctx);
      break;
    case 'food_photo':
      await ctx.reply('üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      ctx.currentStep = 'food_photo';
      await saveUserSession(ctx.from!.id, 'food_photo', {});
      break;
    case 'food_text':
      await ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Å—ä–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–≤—Å—è–Ω–∫–∞ 100–≥ —Å –±–∞–Ω–∞–Ω–æ–º")');
      ctx.currentStep = 'food_text';
      await saveUserSession(ctx.from!.id, 'food_text', {});
      break;
    case 'water_100':
    case 'water_250':
    case 'water_500':
    case 'water_750':
      const amount = parseInt(data.split('_')[1]);
      await addWater(ctx, amount);
      break;
    case 'water_history':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showWaterHistory(ctx);
      break;
    case 'ai_questions':
      // Keep AI coach mode active
      await showPopularQuestions(ctx);
      break;
    case 'upload_medical':
      await handleMedicalDocumentUpload(ctx);
      break;
    case 'view_medical':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showMedicalData(ctx);
      break;
    case 'medical_history':
      await clearUserSession(ctx.from!.id);
      ctx.currentStep = undefined;
      await showMedicalHistory(ctx);
      break;
    default:
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
  }
}

// Helper functions
function getActivityLevelText(level: string): string {
  const levels = {
    sedentary: '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π',
    light: '–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    moderate: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    active: '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    very_active: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
  };
  return levels[level as keyof typeof levels] || level;
}

function getGoalText(goal: string): string {
  const goals = {
    lose: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    maintain: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
    gain: '–ù–∞–±–æ—Ä –≤–µ—Å–∞',
  };
  return goals[goal as keyof typeof goals] || goal;
}

// Error handling
bot.catch((err: any, ctx: CustomContext) => {
  console.error('Bot error:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

// Export bot instance
export { bot };

// Start function
export async function startBot(): Promise<void> {
  try {
    validateConfig();
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ "–î–∞–ï–¥–∞"...');
    
    // Stop any existing webhook and use polling
    await bot.telegram.deleteWebhook();
    console.log('Webhook deleted, starting polling...');
    
    // Set menu button to show main menu
    try {
      await bot.telegram.setChatMenuButton({
        menuButton: {
          type: 'commands',
        },
      });
      console.log('‚úÖ Menu button configured');
    } catch (error) {
      console.error('‚ö†Ô∏è Failed to set menu button:', error);
    }
    
    // Set bot commands for menu
    try {
      await bot.telegram.setMyCommands([
        { command: 'start', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' },
      ]);
      console.log('‚úÖ Bot commands set');
    } catch (error) {
      console.error('‚ö†Ô∏è Failed to set bot commands:', error);
    }
    
    // Use polling mode for Railway deployment
    await bot.launch({
      dropPendingUpdates: true, // Drop pending updates to avoid conflicts
    });
    console.log('Bot started with polling');

    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
